// $GEN_VERSION 3
// This file is auto-generated.
// Do not edit this file manually, use `gen_inst.py` to regenerate it.
#![allow(
    dead_code,
    unused_variables,
    unused_imports,
    unreachable_code,
    unused_mut
)]
use crate::bits::*;
use crate::format::*;
use crate::*;

impl Inst {
    #[inline]
    pub const fn decode(inst: Word) -> Option<Self> {
        Some(match inst {
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;25) == 0b0000000 =>
            {
                Inst::Add(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;25) == 0b0100000 =>
            {
                Inst::Sub(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b001
                && ext!(v, Word; 31;25) == 0b0000000 =>
            {
                Inst::Sll(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;25) == 0b0000000 =>
            {
                Inst::Slt(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b011
                && ext!(v, Word; 31;25) == 0b0000000 =>
            {
                Inst::Sltu(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b100
                && ext!(v, Word; 31;25) == 0b0000000 =>
            {
                Inst::Xor(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b101
                && ext!(v, Word; 31;25) == 0b0000000 =>
            {
                Inst::Srl(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b101
                && ext!(v, Word; 31;25) == 0b0100000 =>
            {
                Inst::Sra(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b110
                && ext!(v, Word; 31;25) == 0b0000000 =>
            {
                Inst::Or(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b111
                && ext!(v, Word; 31;25) == 0b0000000 =>
            {
                Inst::And(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1110011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;25) == 0b0001001 =>
            {
                Inst::SfenceVma(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0010011 && ext!(v, Word; 14;12) == 0b000 => {
                Inst::Addi(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0010011 && ext!(v, Word; 14;12) == 0b010 => {
                Inst::Slti(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0010011 && ext!(v, Word; 14;12) == 0b011 => {
                Inst::Sltiu(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0010011 && ext!(v, Word; 14;12) == 0b100 => {
                Inst::Xori(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0010011 && ext!(v, Word; 14;12) == 0b110 => {
                Inst::Ori(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0010011 && ext!(v, Word; 14;12) == 0b111 => {
                Inst::Andi(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0010011
                && ext!(v, Word; 14;12) == 0b001
                && ext!(v, Word; 31;26) == 0b000000 =>
            {
                Inst::Slli(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0010011
                && ext!(v, Word; 14;12) == 0b101
                && ext!(v, Word; 31;26) == 0b000000 =>
            {
                Inst::Srli(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0010011
                && ext!(v, Word; 14;12) == 0b101
                && ext!(v, Word; 31;26) == 0b010000 =>
            {
                Inst::Srai(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0000011 && ext!(v, Word; 14;12) == 0b000 => {
                Inst::Lb(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0000011 && ext!(v, Word; 14;12) == 0b001 => {
                Inst::Lh(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0000011 && ext!(v, Word; 14;12) == 0b010 => {
                Inst::Lw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0000011 && ext!(v, Word; 14;12) == 0b100 => {
                Inst::Lbu(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0000011 && ext!(v, Word; 14;12) == 0b101 => {
                Inst::Lhu(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1100111 && ext!(v, Word; 14;12) == 0b000 => {
                Inst::Jalr(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0001111 && ext!(v, Word; 14;12) == 0b000 => {
                Inst::Fence(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0001111 && ext!(v, Word; 14;12) == 0b001 => {
                Inst::FenceI(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1110011 && ext!(v, Word; 14;12) == 0b001 => {
                Inst::Csrrw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1110011 && ext!(v, Word; 14;12) == 0b010 => {
                Inst::Csrrs(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1110011 && ext!(v, Word; 14;12) == 0b011 => {
                Inst::Csrrc(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1110011 && ext!(v, Word; 14;12) == 0b101 => {
                Inst::Csrrwi(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1110011 && ext!(v, Word; 14;12) == 0b110 => {
                Inst::Csrrsi(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1110011 && ext!(v, Word; 14;12) == 0b111 => {
                Inst::Csrrci(RawInst::new(inst))
            }
            v if ext!(v, Word; 31;0) == 0b00000000000000000000000001110011 => {
                Inst::Ecall(RawInst::new(inst))
            }
            v if ext!(v, Word; 31;0) == 0b00000000000100000000000001110011 => {
                Inst::Ebreak(RawInst::new(inst))
            }
            v if ext!(v, Word; 31;0) == 0b00000000001000000000000001110011 => {
                Inst::Uret(RawInst::new(inst))
            }
            v if ext!(v, Word; 31;0) == 0b00010000001000000000000001110011 => {
                Inst::Sret(RawInst::new(inst))
            }
            v if ext!(v, Word; 31;0) == 0b00110000001000000000000001110011 => {
                Inst::Mret(RawInst::new(inst))
            }
            v if ext!(v, Word; 31;0) == 0b00010000010100000000000001110011 => {
                Inst::Wfi(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0100011 && ext!(v, Word; 14;12) == 0b000 => {
                Inst::Sb(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0100011 && ext!(v, Word; 14;12) == 0b001 => {
                Inst::Sh(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0100011 && ext!(v, Word; 14;12) == 0b010 => {
                Inst::Sw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1100011 && ext!(v, Word; 14;12) == 0b000 => {
                Inst::Beq(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1100011 && ext!(v, Word; 14;12) == 0b001 => {
                Inst::Bne(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1100011 && ext!(v, Word; 14;12) == 0b100 => {
                Inst::Blt(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1100011 && ext!(v, Word; 14;12) == 0b101 => {
                Inst::Bge(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1100011 && ext!(v, Word; 14;12) == 0b110 => {
                Inst::Bltu(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1100011 && ext!(v, Word; 14;12) == 0b111 => {
                Inst::Bgeu(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110111 => Inst::Lui(RawInst::new(inst)),
            v if ext!(v, Word; 6;0) == 0b0010111 => Inst::Auipc(RawInst::new(inst)),
            v if ext!(v, Word; 6;0) == 0b1101111 => Inst::Jal(RawInst::new(inst)),
            v if ext!(v, Word; 6;0) == 0b0111011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;25) == 0b0000000 =>
            {
                Inst::Addw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0111011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;25) == 0b0100000 =>
            {
                Inst::Subw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0111011
                && ext!(v, Word; 14;12) == 0b001
                && ext!(v, Word; 31;25) == 0b0000000 =>
            {
                Inst::Sllw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0111011
                && ext!(v, Word; 14;12) == 0b101
                && ext!(v, Word; 31;25) == 0b0000000 =>
            {
                Inst::Srlw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0111011
                && ext!(v, Word; 14;12) == 0b101
                && ext!(v, Word; 31;25) == 0b0100000 =>
            {
                Inst::Sraw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0011011 && ext!(v, Word; 14;12) == 0b000 => {
                Inst::Addiw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0011011
                && ext!(v, Word; 14;12) == 0b001
                && ext!(v, Word; 31;25) == 0b0000000 =>
            {
                Inst::Slliw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0011011
                && ext!(v, Word; 14;12) == 0b101
                && ext!(v, Word; 31;25) == 0b0000000 =>
            {
                Inst::Srliw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0011011
                && ext!(v, Word; 14;12) == 0b101
                && ext!(v, Word; 31;25) == 0b0100000 =>
            {
                Inst::Sraiw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0000011 && ext!(v, Word; 14;12) == 0b110 => {
                Inst::Lwu(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0000011 && ext!(v, Word; 14;12) == 0b011 => {
                Inst::Ld(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0100011 && ext!(v, Word; 14;12) == 0b011 => {
                Inst::Sd(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;25) == 0b0000001 =>
            {
                Inst::Mul(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b001
                && ext!(v, Word; 31;25) == 0b0000001 =>
            {
                Inst::Mulh(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;25) == 0b0000001 =>
            {
                Inst::Mulhsu(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b011
                && ext!(v, Word; 31;25) == 0b0000001 =>
            {
                Inst::Mulhu(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b100
                && ext!(v, Word; 31;25) == 0b0000001 =>
            {
                Inst::Div(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b101
                && ext!(v, Word; 31;25) == 0b0000001 =>
            {
                Inst::Divu(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b110
                && ext!(v, Word; 31;25) == 0b0000001 =>
            {
                Inst::Rem(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b111
                && ext!(v, Word; 31;25) == 0b0000001 =>
            {
                Inst::Remu(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0111011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;25) == 0b0000001 =>
            {
                Inst::Mulw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0111011
                && ext!(v, Word; 14;12) == 0b100
                && ext!(v, Word; 31;25) == 0b0000001 =>
            {
                Inst::Divw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0111011
                && ext!(v, Word; 14;12) == 0b101
                && ext!(v, Word; 31;25) == 0b0000001 =>
            {
                Inst::Divuw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0111011
                && ext!(v, Word; 14;12) == 0b110
                && ext!(v, Word; 31;25) == 0b0000001 =>
            {
                Inst::Remw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0111011
                && ext!(v, Word; 14;12) == 0b111
                && ext!(v, Word; 31;25) == 0b0000001 =>
            {
                Inst::Remuw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 24;20) == 0b00000
                && ext!(v, Word; 31;27) == 0b00010 =>
            {
                Inst::LrW(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;27) == 0b00011 =>
            {
                Inst::ScW(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;27) == 0b00001 =>
            {
                Inst::AmoswapW(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;27) == 0b00000 =>
            {
                Inst::AmoaddW(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;27) == 0b00100 =>
            {
                Inst::AmoxorW(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;27) == 0b01100 =>
            {
                Inst::AmoandW(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;27) == 0b01000 =>
            {
                Inst::AmoorW(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;27) == 0b10000 =>
            {
                Inst::AmominW(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;27) == 0b10100 =>
            {
                Inst::AmomaxW(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;27) == 0b11000 =>
            {
                Inst::AmominuW(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;27) == 0b11100 =>
            {
                Inst::AmomaxuW(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b011
                && ext!(v, Word; 24;20) == 0b00000
                && ext!(v, Word; 31;27) == 0b00010 =>
            {
                Inst::LrD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b011
                && ext!(v, Word; 31;27) == 0b00011 =>
            {
                Inst::ScD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b011
                && ext!(v, Word; 31;27) == 0b00001 =>
            {
                Inst::AmodswapD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b011
                && ext!(v, Word; 31;27) == 0b00000 =>
            {
                Inst::AmoaddD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b011
                && ext!(v, Word; 31;27) == 0b00100 =>
            {
                Inst::AmoxorD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b011
                && ext!(v, Word; 31;27) == 0b01100 =>
            {
                Inst::AmoandD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b011
                && ext!(v, Word; 31;27) == 0b01000 =>
            {
                Inst::AmoorD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b011
                && ext!(v, Word; 31;27) == 0b10000 =>
            {
                Inst::AmominD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b011
                && ext!(v, Word; 31;27) == 0b10100 =>
            {
                Inst::AmomaxD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b011
                && ext!(v, Word; 31;27) == 0b11000 =>
            {
                Inst::AmominuD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b011
                && ext!(v, Word; 31;27) == 0b11100 =>
            {
                Inst::AmomaxuD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1000011 && ext!(v, Word; 26;25) == 0b00 => {
                Inst::FmaddS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1000111 && ext!(v, Word; 26;25) == 0b00 => {
                Inst::FmsubS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1001011 && ext!(v, Word; 26;25) == 0b00 => {
                Inst::FnmsubS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1001111 && ext!(v, Word; 26;25) == 0b00 => {
                Inst::FnmaddS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;25) == 0b0000000 => {
                Inst::FaddS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;25) == 0b0000100 => {
                Inst::FsubS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;25) == 0b0001000 => {
                Inst::FmulS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;25) == 0b0001100 => {
                Inst::FdivS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b010110000000 => {
                Inst::FsqrtS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;25) == 0b0010000 =>
            {
                Inst::FsgnjS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b001
                && ext!(v, Word; 31;25) == 0b0010000 =>
            {
                Inst::FsgnjnS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;25) == 0b0010000 =>
            {
                Inst::FsgnjxS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;25) == 0b0010100 =>
            {
                Inst::FminS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b001
                && ext!(v, Word; 31;25) == 0b0010100 =>
            {
                Inst::FmaxS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110000000000 => {
                Inst::FcvtWS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110000000001 => {
                Inst::FcvtWuS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;20) == 0b111000000000 =>
            {
                Inst::FmvXW(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;25) == 0b1010000 =>
            {
                Inst::FeqS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b001
                && ext!(v, Word; 31;25) == 0b1010000 =>
            {
                Inst::FltS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;25) == 0b1010000 =>
            {
                Inst::FleS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b001
                && ext!(v, Word; 31;20) == 0b111000000000 =>
            {
                Inst::FclassS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110100000000 => {
                Inst::FcvtSW(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110100000001 => {
                Inst::FcvtSWu(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;20) == 0b111100000000 =>
            {
                Inst::FmvWX(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1000011 && ext!(v, Word; 26;25) == 0b01 => {
                Inst::FmaddD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1000111 && ext!(v, Word; 26;25) == 0b01 => {
                Inst::FmsubD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1001011 && ext!(v, Word; 26;25) == 0b01 => {
                Inst::FnmsubD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1001111 && ext!(v, Word; 26;25) == 0b01 => {
                Inst::FnmaddD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;25) == 0b0000001 => {
                Inst::FaddD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;25) == 0b0000101 => {
                Inst::FsubD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;25) == 0b0001001 => {
                Inst::FmulD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;25) == 0b0001101 => {
                Inst::FdivD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b010110100000 => {
                Inst::FsqrtD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;25) == 0b0010001 =>
            {
                Inst::FsgnjD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b001
                && ext!(v, Word; 31;25) == 0b0010001 =>
            {
                Inst::FsgnjnD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;25) == 0b0010001 =>
            {
                Inst::FsgnjxD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;25) == 0b0010101 =>
            {
                Inst::FminD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b001
                && ext!(v, Word; 31;25) == 0b0010101 =>
            {
                Inst::FmaxD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b010000000001 => {
                Inst::FcvtSD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b010000100000 => {
                Inst::FcvtDS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;25) == 0b1010001 =>
            {
                Inst::FeqD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b001
                && ext!(v, Word; 31;25) == 0b1010001 =>
            {
                Inst::FltD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;25) == 0b1010001 =>
            {
                Inst::FleD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b001
                && ext!(v, Word; 31;20) == 0b111000100000 =>
            {
                Inst::FclassD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110000100000 => {
                Inst::FcvtWD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110000100001 => {
                Inst::FcvtWuD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110100100000 => {
                Inst::FcvtDW(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110100100001 => {
                Inst::FcvtDWu(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0000111 && ext!(v, Word; 14;12) == 0b010 => {
                Inst::Flw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0100111 && ext!(v, Word; 14;12) == 0b010 => {
                Inst::Fsw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0000111 && ext!(v, Word; 14;12) == 0b011 => {
                Inst::Fld(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0100111 && ext!(v, Word; 14;12) == 0b011 => {
                Inst::Fsd(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110000000010 => {
                Inst::FcvtLS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110000000011 => {
                Inst::FcvtLuS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110100000010 => {
                Inst::FcvtSL(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110100000011 => {
                Inst::FcvtSLu(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110000100010 => {
                Inst::FcvtLD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110000100011 => {
                Inst::FcvtLuD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;20) == 0b111000100000 =>
            {
                Inst::FmvXD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110100100010 => {
                Inst::FcvtDL(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110100100011 => {
                Inst::FcvtDLu(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;20) == 0b111100100000 =>
            {
                Inst::FmvDX(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0000010 && ext!(v, Word; 15;12) == 0b1000 => {
                Inst::CJr(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b10 && ext!(v, Word; 15;12) == 0b1000 => {
                Inst::CMv(RawInst::new(inst))
            }
            v if ext!(v, Word; 15;0) == 0b1001000000000010 => Inst::CEbreak(RawInst::new(inst)),
            v if ext!(v, Word; 6;0) == 0b0000010 && ext!(v, Word; 15;12) == 0b1001 => {
                Inst::CJalr(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b10 && ext!(v, Word; 15;12) == 0b1001 => {
                Inst::CAdd(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01
                && ext!(v, Word; 11;7) == 0b00000
                && ext!(v, Word; 15;13) == 0b000 =>
            {
                Inst::CNop(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01 && ext!(v, Word; 15;13) == 0b000 => {
                Inst::CAddi(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01 && ext!(v, Word; 15;13) == 0b001 => {
                Inst::CAddiw(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01 && ext!(v, Word; 15;13) == 0b010 => {
                Inst::CLi(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01
                && ext!(v, Word; 11;7) == 0b00010
                && ext!(v, Word; 15;13) == 0b011 =>
            {
                Inst::CAddi16sp(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01 && ext!(v, Word; 15;13) == 0b011 => {
                Inst::CLui(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01
                && ext!(v, Word; 11;10) == 0b00
                && ext!(v, Word; 15;13) == 0b100 =>
            {
                Inst::CSrli(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01
                && ext!(v, Word; 11;10) == 0b01
                && ext!(v, Word; 15;13) == 0b100 =>
            {
                Inst::CSrai(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01
                && ext!(v, Word; 11;10) == 0b10
                && ext!(v, Word; 15;13) == 0b100 =>
            {
                Inst::CAndi(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b10 && ext!(v, Word; 15;13) == 0b000 => {
                Inst::CSlli(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b10 && ext!(v, Word; 15;13) == 0b001 => {
                Inst::CFldsp(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b10 && ext!(v, Word; 15;13) == 0b010 => {
                Inst::CLwsp(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b10 && ext!(v, Word; 15;13) == 0b011 => {
                Inst::CLdsp(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b10 && ext!(v, Word; 15;13) == 0b101 => {
                Inst::CFsdsp(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b10 && ext!(v, Word; 15;13) == 0b110 => {
                Inst::CSwsp(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b10 && ext!(v, Word; 15;13) == 0b111 => {
                Inst::CSdsp(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b00 && ext!(v, Word; 15;13) == 0b000 => {
                Inst::CAddi4spn(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b00 && ext!(v, Word; 15;13) == 0b001 => {
                Inst::CFld(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b00 && ext!(v, Word; 15;13) == 0b010 => {
                Inst::CLw(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b00 && ext!(v, Word; 15;13) == 0b011 => {
                Inst::CLd(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b00 && ext!(v, Word; 15;13) == 0b101 => {
                Inst::CFsd(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b00 && ext!(v, Word; 15;13) == 0b110 => {
                Inst::CSw(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b00 && ext!(v, Word; 15;13) == 0b111 => {
                Inst::CSd(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01
                && ext!(v, Word; 6;5) == 0b00
                && ext!(v, Word; 15;10) == 0b100011 =>
            {
                Inst::CSub(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01
                && ext!(v, Word; 6;5) == 0b01
                && ext!(v, Word; 15;10) == 0b100011 =>
            {
                Inst::CXor(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01
                && ext!(v, Word; 6;5) == 0b10
                && ext!(v, Word; 15;10) == 0b100011 =>
            {
                Inst::COr(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01
                && ext!(v, Word; 6;5) == 0b11
                && ext!(v, Word; 15;10) == 0b100011 =>
            {
                Inst::CAnd(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01
                && ext!(v, Word; 6;5) == 0b00
                && ext!(v, Word; 15;10) == 0b100111 =>
            {
                Inst::CSubw(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01
                && ext!(v, Word; 6;5) == 0b01
                && ext!(v, Word; 15;10) == 0b100111 =>
            {
                Inst::CAddw(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01 && ext!(v, Word; 15;13) == 0b110 => {
                Inst::CBeqz(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01 && ext!(v, Word; 15;13) == 0b111 => {
                Inst::CBnez(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01 && ext!(v, Word; 15;13) == 0b101 => {
                Inst::CJ(RawInst::new(inst))
            }
            _ => return None,
        })
    }
}
