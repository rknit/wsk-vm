// $GEN_VERSION 2
// This file is auto-generated.
// Do not edit this file manually, use `gen_inst.py` to regenerate it.
#![allow(dead_code, unused_variables, unused_imports, unreachable_code)]
use crate::bits::*;
use crate::format::*;
use crate::{VM, VMRunError, VMRunErrorKind};

mod rv32i_rv64i;
use rv32i_rv64i::*;

#[derive(Debug, Clone, Copy)]
pub enum Inst {
    // RV32I_RV64I
    Add { rd: u8, rs1: u8, rs2: u8 },
    Addi { rd: u8, rs1: u8, imm: i16 },
}

impl Inst {
    pub fn decode(fmt: RawFormat) -> Option<Self> {
        use RawFormat::*;
        Some(match fmt {
            R {
                opc,
                f3,
                f7,
                rd,
                rs1,
                rs2,
            } => match (opc, f3, f7, rd, rs1, rs2) {
                (0b01100, 0b000, 0b0000000, _, _, _) => Inst::Add { rd, rs1, rs2 },

                #[allow(unreachable_patterns)]
                _ => return None,
            },
            I {
                opc,
                f3,
                rd,
                rs1,
                imm,
            } => match (opc, f3, rd, rs1, imm) {
                (0b00100, 0b000, _, _, _) => Inst::Addi { rd, rs1, imm },

                #[allow(unreachable_patterns)]
                _ => return None,
            },
            S {
                opc,
                f3,
                rs1,
                rs2,
                imm,
            } => match (opc, f3, rs1, rs2, imm) {
                #[allow(unreachable_patterns)]
                _ => return None,
            },
            B {
                opc,
                f3,
                rs1,
                rs2,
                imm,
            } => match (opc, f3, rs1, rs2, imm) {
                #[allow(unreachable_patterns)]
                _ => return None,
            },
            U { opc, rd, imm } => match (opc, rd, imm) {
                #[allow(unreachable_patterns)]
                _ => return None,
            },
            J { opc, rd, imm } => match (opc, rd, imm) {
                #[allow(unreachable_patterns)]
                _ => return None,
            },
        })
    }

    pub fn run(self, vm: &mut VM) -> Result<(), VMRunError> {
        match self {
            Inst::Add { rd, rs1, rs2 } => Add::run(DataR { vm, rd, rs1, rs2 }),
            Inst::Addi { rd, rs1, imm } => Addi::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),

            #[allow(unreachable_patterns)]
            _ => {
                return Err(VMRunError {
                    err_addr: vm.pc,
                    kind: VMRunErrorKind::Other(format!("{:?}", self)),
                    info: "unimplemented inst",
                });
            }
        }
    }

    pub fn name(self) -> &'static str {
        match self {
            Inst::Add { .. } => "add",
            Inst::Addi { .. } => "addi",

            #[allow(unreachable_patterns)]
            _ => "unknown",
        }
    }
}
