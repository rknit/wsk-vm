// $GEN_VERSION 3
// This file is auto-generated.
// Do not edit this file manually, use `gen_inst.py` to regenerate it.
#![allow(
    dead_code,
    unused_variables,
    unused_imports,
    unreachable_code,
    unused_mut
)]
use crate::bits::*;
use crate::format::*;
use crate::*;

mod rv32i_rv64i;
use rv32i_rv64i::*;

mod rv64i;
use rv64i::*;

mod rv32m_rv64m;
use rv32m_rv64m::*;

mod rv64m;
use rv64m::*;

mod rv32a_rv64a;
use rv32a_rv64a::*;

mod rv64a;
use rv64a::*;

mod rv32f_rv64f;
use rv32f_rv64f::*;

mod rv64f;
use rv64f::*;

mod rv64d;
use rv64d::*;

mod rv64c;
use rv64c::*;

#[derive(Debug, Clone, Copy)]
#[repr(u8)]
pub enum Inst {
    // RV32I_RV64I
    Add(RawInst) = 0,
    Sub(RawInst) = 1,
    Sll(RawInst) = 2,
    Slt(RawInst) = 3,
    Sltu(RawInst) = 4,
    Xor(RawInst) = 5,
    Srl(RawInst) = 6,
    Sra(RawInst) = 7,
    Or(RawInst) = 8,
    And(RawInst) = 9,
    SfenceVma(RawInst) = 10,
    Addi(RawInst) = 11,
    Slti(RawInst) = 12,
    Sltiu(RawInst) = 13,
    Xori(RawInst) = 14,
    Ori(RawInst) = 15,
    Andi(RawInst) = 16,
    Slli(RawInst) = 17,
    Srli(RawInst) = 18,
    Srai(RawInst) = 19,
    Lb(RawInst) = 20,
    Lh(RawInst) = 21,
    Lw(RawInst) = 22,
    Lbu(RawInst) = 23,
    Lhu(RawInst) = 24,
    Jalr(RawInst) = 25,
    Fence(RawInst) = 26,
    FenceI(RawInst) = 27,
    Csrrw(RawInst) = 28,
    Csrrs(RawInst) = 29,
    Csrrc(RawInst) = 30,
    Csrrwi(RawInst) = 31,
    Csrrsi(RawInst) = 32,
    Csrrci(RawInst) = 33,
    Ecall(RawInst) = 34,
    Ebreak(RawInst) = 35,
    Uret(RawInst) = 36,
    Sret(RawInst) = 37,
    Mret(RawInst) = 38,
    Wfi(RawInst) = 39,
    Sb(RawInst) = 40,
    Sh(RawInst) = 41,
    Sw(RawInst) = 42,
    Beq(RawInst) = 43,
    Bne(RawInst) = 44,
    Blt(RawInst) = 45,
    Bge(RawInst) = 46,
    Bltu(RawInst) = 47,
    Bgeu(RawInst) = 48,
    Lui(RawInst) = 49,
    Auipc(RawInst) = 50,
    Jal(RawInst) = 51,

    // RV64I
    Addw(RawInst) = 52,
    Subw(RawInst) = 53,
    Sllw(RawInst) = 54,
    Srlw(RawInst) = 55,
    Sraw(RawInst) = 56,
    Addiw(RawInst) = 57,
    Slliw(RawInst) = 58,
    Srliw(RawInst) = 59,
    Sraiw(RawInst) = 60,
    Lwu(RawInst) = 61,
    Ld(RawInst) = 62,
    Sd(RawInst) = 63,

    // RV32M_RV64M
    Mul(RawInst) = 64,
    Mulh(RawInst) = 65,
    Mulhsu(RawInst) = 66,
    Mulhu(RawInst) = 67,
    Div(RawInst) = 68,
    Divu(RawInst) = 69,
    Rem(RawInst) = 70,
    Remu(RawInst) = 71,

    // RV64M
    Mulw(RawInst) = 72,
    Divw(RawInst) = 73,
    Divuw(RawInst) = 74,
    Remw(RawInst) = 75,
    Remuw(RawInst) = 76,

    // RV32A_RV64A
    LrW(RawInst) = 77,
    ScW(RawInst) = 78,
    AmoswapW(RawInst) = 79,
    AmoaddW(RawInst) = 80,
    AmoxorW(RawInst) = 81,
    AmoandW(RawInst) = 82,
    AmoorW(RawInst) = 83,
    AmominW(RawInst) = 84,
    AmomaxW(RawInst) = 85,
    AmominuW(RawInst) = 86,
    AmomaxuW(RawInst) = 87,

    // RV64A
    LrD(RawInst) = 88,
    ScD(RawInst) = 89,
    AmodswapD(RawInst) = 90,
    AmoaddD(RawInst) = 91,
    AmoxorD(RawInst) = 92,
    AmoandD(RawInst) = 93,
    AmoorD(RawInst) = 94,
    AmominD(RawInst) = 95,
    AmomaxD(RawInst) = 96,
    AmominuD(RawInst) = 97,
    AmomaxuD(RawInst) = 98,

    // RV32F_RV64F
    FmaddS(RawInst) = 99,
    FmsubS(RawInst) = 100,
    FnmsubS(RawInst) = 101,
    FnmaddS(RawInst) = 102,
    FaddS(RawInst) = 103,
    FsubS(RawInst) = 104,
    FmulS(RawInst) = 105,
    FdivS(RawInst) = 106,
    FsqrtS(RawInst) = 107,
    FsgnjS(RawInst) = 108,
    FsgnjnS(RawInst) = 109,
    FsgnjxS(RawInst) = 110,
    FminS(RawInst) = 111,
    FmaxS(RawInst) = 112,
    FcvtWS(RawInst) = 113,
    FcvtWuS(RawInst) = 114,
    FmvXW(RawInst) = 115,
    FeqS(RawInst) = 116,
    FltS(RawInst) = 117,
    FleS(RawInst) = 118,
    FclassS(RawInst) = 119,
    FcvtSW(RawInst) = 120,
    FcvtSWu(RawInst) = 121,
    FmvWX(RawInst) = 122,
    FmaddD(RawInst) = 123,
    FmsubD(RawInst) = 124,
    FnmsubD(RawInst) = 125,
    FnmaddD(RawInst) = 126,
    FaddD(RawInst) = 127,
    FsubD(RawInst) = 128,
    FmulD(RawInst) = 129,
    FdivD(RawInst) = 130,
    FsqrtD(RawInst) = 131,
    FsgnjD(RawInst) = 132,
    FsgnjnD(RawInst) = 133,
    FsgnjxD(RawInst) = 134,
    FminD(RawInst) = 135,
    FmaxD(RawInst) = 136,
    FcvtSD(RawInst) = 137,
    FcvtDS(RawInst) = 138,
    FeqD(RawInst) = 139,
    FltD(RawInst) = 140,
    FleD(RawInst) = 141,
    FclassD(RawInst) = 142,
    FcvtWD(RawInst) = 143,
    FcvtWuD(RawInst) = 144,
    FcvtDW(RawInst) = 145,
    FcvtDWu(RawInst) = 146,
    Flw(RawInst) = 147,
    Fsw(RawInst) = 148,
    Fld(RawInst) = 149,
    Fsd(RawInst) = 150,

    // RV64F
    FcvtLS(RawInst) = 151,
    FcvtLuS(RawInst) = 152,
    FcvtSL(RawInst) = 153,
    FcvtSLu(RawInst) = 154,

    // RV64D
    FcvtLD(RawInst) = 155,
    FcvtLuD(RawInst) = 156,
    FmvXD(RawInst) = 157,
    FcvtDL(RawInst) = 158,
    FcvtDLu(RawInst) = 159,
    FmvDX(RawInst) = 160,

    // RV64C
    CJr(RawInst) = 161,
    CMv(RawInst) = 162,
    CEbreak(RawInst) = 163,
    CJalr(RawInst) = 164,
    CAdd(RawInst) = 165,
    CNop(RawInst) = 166,
    CAddi(RawInst) = 167,
    CAddiw(RawInst) = 168,
    CLi(RawInst) = 169,
    CAddi16sp(RawInst) = 170,
    CLui(RawInst) = 171,
    CSrli(RawInst) = 172,
    CSrai(RawInst) = 173,
    CAndi(RawInst) = 174,
    CSlli(RawInst) = 175,
    CFldsp(RawInst) = 176,
    CLwsp(RawInst) = 177,
    CLdsp(RawInst) = 178,
    CFsdsp(RawInst) = 179,
    CSwsp(RawInst) = 180,
    CSdsp(RawInst) = 181,
    CAddi4spn(RawInst) = 182,
    CFld(RawInst) = 183,
    CLw(RawInst) = 184,
    CLd(RawInst) = 185,
    CFsd(RawInst) = 186,
    CSw(RawInst) = 187,
    CSd(RawInst) = 188,
    CSub(RawInst) = 189,
    CXor(RawInst) = 190,
    COr(RawInst) = 191,
    CAnd(RawInst) = 192,
    CSubw(RawInst) = 193,
    CAddw(RawInst) = 194,
    CBeqz(RawInst) = 195,
    CBnez(RawInst) = 196,
    CJ(RawInst) = 197,
}

impl Inst {
    #[inline]
    pub const fn decode(inst: Word) -> Option<Self> {
        Some(match inst {
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;25) == 0b0000000 =>
            {
                Inst::Add(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;25) == 0b0100000 =>
            {
                Inst::Sub(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b001
                && ext!(v, Word; 31;25) == 0b0000000 =>
            {
                Inst::Sll(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;25) == 0b0000000 =>
            {
                Inst::Slt(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b011
                && ext!(v, Word; 31;25) == 0b0000000 =>
            {
                Inst::Sltu(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b100
                && ext!(v, Word; 31;25) == 0b0000000 =>
            {
                Inst::Xor(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b101
                && ext!(v, Word; 31;25) == 0b0000000 =>
            {
                Inst::Srl(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b101
                && ext!(v, Word; 31;25) == 0b0100000 =>
            {
                Inst::Sra(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b110
                && ext!(v, Word; 31;25) == 0b0000000 =>
            {
                Inst::Or(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b111
                && ext!(v, Word; 31;25) == 0b0000000 =>
            {
                Inst::And(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1110011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;25) == 0b0001001 =>
            {
                Inst::SfenceVma(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0010011 && ext!(v, Word; 14;12) == 0b000 => {
                Inst::Addi(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0010011 && ext!(v, Word; 14;12) == 0b010 => {
                Inst::Slti(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0010011 && ext!(v, Word; 14;12) == 0b011 => {
                Inst::Sltiu(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0010011 && ext!(v, Word; 14;12) == 0b100 => {
                Inst::Xori(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0010011 && ext!(v, Word; 14;12) == 0b110 => {
                Inst::Ori(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0010011 && ext!(v, Word; 14;12) == 0b111 => {
                Inst::Andi(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0010011
                && ext!(v, Word; 14;12) == 0b001
                && ext!(v, Word; 31;26) == 0b000000 =>
            {
                Inst::Slli(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0010011
                && ext!(v, Word; 14;12) == 0b101
                && ext!(v, Word; 31;26) == 0b000000 =>
            {
                Inst::Srli(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0010011
                && ext!(v, Word; 14;12) == 0b101
                && ext!(v, Word; 31;26) == 0b010000 =>
            {
                Inst::Srai(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0000011 && ext!(v, Word; 14;12) == 0b000 => {
                Inst::Lb(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0000011 && ext!(v, Word; 14;12) == 0b001 => {
                Inst::Lh(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0000011 && ext!(v, Word; 14;12) == 0b010 => {
                Inst::Lw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0000011 && ext!(v, Word; 14;12) == 0b100 => {
                Inst::Lbu(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0000011 && ext!(v, Word; 14;12) == 0b101 => {
                Inst::Lhu(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1100111 && ext!(v, Word; 14;12) == 0b000 => {
                Inst::Jalr(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0001111 && ext!(v, Word; 14;12) == 0b000 => {
                Inst::Fence(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0001111 && ext!(v, Word; 14;12) == 0b001 => {
                Inst::FenceI(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1110011 && ext!(v, Word; 14;12) == 0b001 => {
                Inst::Csrrw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1110011 && ext!(v, Word; 14;12) == 0b010 => {
                Inst::Csrrs(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1110011 && ext!(v, Word; 14;12) == 0b011 => {
                Inst::Csrrc(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1110011 && ext!(v, Word; 14;12) == 0b101 => {
                Inst::Csrrwi(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1110011 && ext!(v, Word; 14;12) == 0b110 => {
                Inst::Csrrsi(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1110011 && ext!(v, Word; 14;12) == 0b111 => {
                Inst::Csrrci(RawInst::new(inst))
            }
            v if ext!(v, Word; 31;0) == 0b00000000000000000000000001110011 => {
                Inst::Ecall(RawInst::new(inst))
            }
            v if ext!(v, Word; 31;0) == 0b00000000000100000000000001110011 => {
                Inst::Ebreak(RawInst::new(inst))
            }
            v if ext!(v, Word; 31;0) == 0b00000000001000000000000001110011 => {
                Inst::Uret(RawInst::new(inst))
            }
            v if ext!(v, Word; 31;0) == 0b00010000001000000000000001110011 => {
                Inst::Sret(RawInst::new(inst))
            }
            v if ext!(v, Word; 31;0) == 0b00110000001000000000000001110011 => {
                Inst::Mret(RawInst::new(inst))
            }
            v if ext!(v, Word; 31;0) == 0b00010000010100000000000001110011 => {
                Inst::Wfi(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0100011 && ext!(v, Word; 14;12) == 0b000 => {
                Inst::Sb(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0100011 && ext!(v, Word; 14;12) == 0b001 => {
                Inst::Sh(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0100011 && ext!(v, Word; 14;12) == 0b010 => {
                Inst::Sw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1100011 && ext!(v, Word; 14;12) == 0b000 => {
                Inst::Beq(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1100011 && ext!(v, Word; 14;12) == 0b001 => {
                Inst::Bne(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1100011 && ext!(v, Word; 14;12) == 0b100 => {
                Inst::Blt(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1100011 && ext!(v, Word; 14;12) == 0b101 => {
                Inst::Bge(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1100011 && ext!(v, Word; 14;12) == 0b110 => {
                Inst::Bltu(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1100011 && ext!(v, Word; 14;12) == 0b111 => {
                Inst::Bgeu(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110111 => Inst::Lui(RawInst::new(inst)),
            v if ext!(v, Word; 6;0) == 0b0010111 => Inst::Auipc(RawInst::new(inst)),
            v if ext!(v, Word; 6;0) == 0b1101111 => Inst::Jal(RawInst::new(inst)),
            v if ext!(v, Word; 6;0) == 0b0111011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;25) == 0b0000000 =>
            {
                Inst::Addw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0111011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;25) == 0b0100000 =>
            {
                Inst::Subw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0111011
                && ext!(v, Word; 14;12) == 0b001
                && ext!(v, Word; 31;25) == 0b0000000 =>
            {
                Inst::Sllw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0111011
                && ext!(v, Word; 14;12) == 0b101
                && ext!(v, Word; 31;25) == 0b0000000 =>
            {
                Inst::Srlw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0111011
                && ext!(v, Word; 14;12) == 0b101
                && ext!(v, Word; 31;25) == 0b0100000 =>
            {
                Inst::Sraw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0011011 && ext!(v, Word; 14;12) == 0b000 => {
                Inst::Addiw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0011011
                && ext!(v, Word; 14;12) == 0b001
                && ext!(v, Word; 31;25) == 0b0000000 =>
            {
                Inst::Slliw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0011011
                && ext!(v, Word; 14;12) == 0b101
                && ext!(v, Word; 31;25) == 0b0000000 =>
            {
                Inst::Srliw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0011011
                && ext!(v, Word; 14;12) == 0b101
                && ext!(v, Word; 31;25) == 0b0100000 =>
            {
                Inst::Sraiw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0000011 && ext!(v, Word; 14;12) == 0b110 => {
                Inst::Lwu(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0000011 && ext!(v, Word; 14;12) == 0b011 => {
                Inst::Ld(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0100011 && ext!(v, Word; 14;12) == 0b011 => {
                Inst::Sd(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;25) == 0b0000001 =>
            {
                Inst::Mul(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b001
                && ext!(v, Word; 31;25) == 0b0000001 =>
            {
                Inst::Mulh(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;25) == 0b0000001 =>
            {
                Inst::Mulhsu(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b011
                && ext!(v, Word; 31;25) == 0b0000001 =>
            {
                Inst::Mulhu(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b100
                && ext!(v, Word; 31;25) == 0b0000001 =>
            {
                Inst::Div(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b101
                && ext!(v, Word; 31;25) == 0b0000001 =>
            {
                Inst::Divu(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b110
                && ext!(v, Word; 31;25) == 0b0000001 =>
            {
                Inst::Rem(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0110011
                && ext!(v, Word; 14;12) == 0b111
                && ext!(v, Word; 31;25) == 0b0000001 =>
            {
                Inst::Remu(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0111011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;25) == 0b0000001 =>
            {
                Inst::Mulw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0111011
                && ext!(v, Word; 14;12) == 0b100
                && ext!(v, Word; 31;25) == 0b0000001 =>
            {
                Inst::Divw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0111011
                && ext!(v, Word; 14;12) == 0b101
                && ext!(v, Word; 31;25) == 0b0000001 =>
            {
                Inst::Divuw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0111011
                && ext!(v, Word; 14;12) == 0b110
                && ext!(v, Word; 31;25) == 0b0000001 =>
            {
                Inst::Remw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0111011
                && ext!(v, Word; 14;12) == 0b111
                && ext!(v, Word; 31;25) == 0b0000001 =>
            {
                Inst::Remuw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 24;20) == 0b00000
                && ext!(v, Word; 31;27) == 0b00010 =>
            {
                Inst::LrW(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;27) == 0b00011 =>
            {
                Inst::ScW(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;27) == 0b00001 =>
            {
                Inst::AmoswapW(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;27) == 0b00000 =>
            {
                Inst::AmoaddW(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;27) == 0b00100 =>
            {
                Inst::AmoxorW(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;27) == 0b01100 =>
            {
                Inst::AmoandW(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;27) == 0b01000 =>
            {
                Inst::AmoorW(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;27) == 0b10000 =>
            {
                Inst::AmominW(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;27) == 0b10100 =>
            {
                Inst::AmomaxW(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;27) == 0b11000 =>
            {
                Inst::AmominuW(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;27) == 0b11100 =>
            {
                Inst::AmomaxuW(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b011
                && ext!(v, Word; 24;20) == 0b00000
                && ext!(v, Word; 31;27) == 0b00010 =>
            {
                Inst::LrD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b011
                && ext!(v, Word; 31;27) == 0b00011 =>
            {
                Inst::ScD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b011
                && ext!(v, Word; 31;27) == 0b00001 =>
            {
                Inst::AmodswapD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b011
                && ext!(v, Word; 31;27) == 0b00000 =>
            {
                Inst::AmoaddD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b011
                && ext!(v, Word; 31;27) == 0b00100 =>
            {
                Inst::AmoxorD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b011
                && ext!(v, Word; 31;27) == 0b01100 =>
            {
                Inst::AmoandD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b011
                && ext!(v, Word; 31;27) == 0b01000 =>
            {
                Inst::AmoorD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b011
                && ext!(v, Word; 31;27) == 0b10000 =>
            {
                Inst::AmominD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b011
                && ext!(v, Word; 31;27) == 0b10100 =>
            {
                Inst::AmomaxD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b011
                && ext!(v, Word; 31;27) == 0b11000 =>
            {
                Inst::AmominuD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0101111
                && ext!(v, Word; 14;12) == 0b011
                && ext!(v, Word; 31;27) == 0b11100 =>
            {
                Inst::AmomaxuD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1000011 && ext!(v, Word; 26;25) == 0b00 => {
                Inst::FmaddS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1000111 && ext!(v, Word; 26;25) == 0b00 => {
                Inst::FmsubS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1001011 && ext!(v, Word; 26;25) == 0b00 => {
                Inst::FnmsubS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1001111 && ext!(v, Word; 26;25) == 0b00 => {
                Inst::FnmaddS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;25) == 0b0000000 => {
                Inst::FaddS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;25) == 0b0000100 => {
                Inst::FsubS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;25) == 0b0001000 => {
                Inst::FmulS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;25) == 0b0001100 => {
                Inst::FdivS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b010110000000 => {
                Inst::FsqrtS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;25) == 0b0010000 =>
            {
                Inst::FsgnjS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b001
                && ext!(v, Word; 31;25) == 0b0010000 =>
            {
                Inst::FsgnjnS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;25) == 0b0010000 =>
            {
                Inst::FsgnjxS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;25) == 0b0010100 =>
            {
                Inst::FminS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b001
                && ext!(v, Word; 31;25) == 0b0010100 =>
            {
                Inst::FmaxS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110000000000 => {
                Inst::FcvtWS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110000000001 => {
                Inst::FcvtWuS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;20) == 0b111000000000 =>
            {
                Inst::FmvXW(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;25) == 0b1010000 =>
            {
                Inst::FeqS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b001
                && ext!(v, Word; 31;25) == 0b1010000 =>
            {
                Inst::FltS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;25) == 0b1010000 =>
            {
                Inst::FleS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b001
                && ext!(v, Word; 31;20) == 0b111000000000 =>
            {
                Inst::FclassS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110100000000 => {
                Inst::FcvtSW(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110100000001 => {
                Inst::FcvtSWu(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;20) == 0b111100000000 =>
            {
                Inst::FmvWX(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1000011 && ext!(v, Word; 26;25) == 0b01 => {
                Inst::FmaddD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1000111 && ext!(v, Word; 26;25) == 0b01 => {
                Inst::FmsubD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1001011 && ext!(v, Word; 26;25) == 0b01 => {
                Inst::FnmsubD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1001111 && ext!(v, Word; 26;25) == 0b01 => {
                Inst::FnmaddD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;25) == 0b0000001 => {
                Inst::FaddD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;25) == 0b0000101 => {
                Inst::FsubD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;25) == 0b0001001 => {
                Inst::FmulD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;25) == 0b0001101 => {
                Inst::FdivD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b010110100000 => {
                Inst::FsqrtD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;25) == 0b0010001 =>
            {
                Inst::FsgnjD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b001
                && ext!(v, Word; 31;25) == 0b0010001 =>
            {
                Inst::FsgnjnD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;25) == 0b0010001 =>
            {
                Inst::FsgnjxD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;25) == 0b0010101 =>
            {
                Inst::FminD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b001
                && ext!(v, Word; 31;25) == 0b0010101 =>
            {
                Inst::FmaxD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b010000000001 => {
                Inst::FcvtSD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b010000100000 => {
                Inst::FcvtDS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b010
                && ext!(v, Word; 31;25) == 0b1010001 =>
            {
                Inst::FeqD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b001
                && ext!(v, Word; 31;25) == 0b1010001 =>
            {
                Inst::FltD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;25) == 0b1010001 =>
            {
                Inst::FleD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b001
                && ext!(v, Word; 31;20) == 0b111000100000 =>
            {
                Inst::FclassD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110000100000 => {
                Inst::FcvtWD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110000100001 => {
                Inst::FcvtWuD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110100100000 => {
                Inst::FcvtDW(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110100100001 => {
                Inst::FcvtDWu(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0000111 && ext!(v, Word; 14;12) == 0b010 => {
                Inst::Flw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0100111 && ext!(v, Word; 14;12) == 0b010 => {
                Inst::Fsw(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0000111 && ext!(v, Word; 14;12) == 0b011 => {
                Inst::Fld(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0100111 && ext!(v, Word; 14;12) == 0b011 => {
                Inst::Fsd(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110000000010 => {
                Inst::FcvtLS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110000000011 => {
                Inst::FcvtLuS(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110100000010 => {
                Inst::FcvtSL(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110100000011 => {
                Inst::FcvtSLu(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110000100010 => {
                Inst::FcvtLD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110000100011 => {
                Inst::FcvtLuD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;20) == 0b111000100000 =>
            {
                Inst::FmvXD(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110100100010 => {
                Inst::FcvtDL(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011 && ext!(v, Word; 31;20) == 0b110100100011 => {
                Inst::FcvtDLu(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b1010011
                && ext!(v, Word; 14;12) == 0b000
                && ext!(v, Word; 31;20) == 0b111100100000 =>
            {
                Inst::FmvDX(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0000010
                && ext!(v, Word; 31;12) == 0b00000000000000001000 =>
            {
                Inst::CJr(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b10 && ext!(v, Word; 31;12) == 0b00000000000000001000 => {
                Inst::CMv(RawInst::new(inst))
            }
            v if ext!(v, Word; 31;0) == 0b00000000000000001001000000000010 => {
                Inst::CEbreak(RawInst::new(inst))
            }
            v if ext!(v, Word; 6;0) == 0b0000010
                && ext!(v, Word; 31;12) == 0b00000000000000001001 =>
            {
                Inst::CJalr(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b10 && ext!(v, Word; 31;12) == 0b00000000000000001001 => {
                Inst::CAdd(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01
                && ext!(v, Word; 11;7) == 0b00000
                && ext!(v, Word; 31;13) == 0b0000000000000000000 =>
            {
                Inst::CNop(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01 && ext!(v, Word; 31;13) == 0b0000000000000000000 => {
                Inst::CAddi(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01 && ext!(v, Word; 31;13) == 0b0000000000000000001 => {
                Inst::CAddiw(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01 && ext!(v, Word; 31;13) == 0b0000000000000000010 => {
                Inst::CLi(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01
                && ext!(v, Word; 11;7) == 0b00010
                && ext!(v, Word; 31;13) == 0b0000000000000000011 =>
            {
                Inst::CAddi16sp(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01 && ext!(v, Word; 31;13) == 0b0000000000000000011 => {
                Inst::CLui(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01
                && ext!(v, Word; 11;10) == 0b00
                && ext!(v, Word; 31;13) == 0b0000000000000000100 =>
            {
                Inst::CSrli(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01
                && ext!(v, Word; 11;10) == 0b01
                && ext!(v, Word; 31;13) == 0b0000000000000000100 =>
            {
                Inst::CSrai(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01
                && ext!(v, Word; 11;10) == 0b10
                && ext!(v, Word; 31;13) == 0b0000000000000000100 =>
            {
                Inst::CAndi(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b10 && ext!(v, Word; 31;13) == 0b0000000000000000000 => {
                Inst::CSlli(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b10 && ext!(v, Word; 31;13) == 0b0000000000000000001 => {
                Inst::CFldsp(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b10 && ext!(v, Word; 31;13) == 0b0000000000000000010 => {
                Inst::CLwsp(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b10 && ext!(v, Word; 31;13) == 0b0000000000000000011 => {
                Inst::CLdsp(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b10 && ext!(v, Word; 31;13) == 0b0000000000000000101 => {
                Inst::CFsdsp(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b10 && ext!(v, Word; 31;13) == 0b0000000000000000110 => {
                Inst::CSwsp(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b10 && ext!(v, Word; 31;13) == 0b0000000000000000111 => {
                Inst::CSdsp(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b00 && ext!(v, Word; 31;13) == 0b0000000000000000000 => {
                Inst::CAddi4spn(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b00 && ext!(v, Word; 31;13) == 0b0000000000000000001 => {
                Inst::CFld(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b00 && ext!(v, Word; 31;13) == 0b0000000000000000010 => {
                Inst::CLw(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b00 && ext!(v, Word; 31;13) == 0b0000000000000000011 => {
                Inst::CLd(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b00 && ext!(v, Word; 31;13) == 0b0000000000000000101 => {
                Inst::CFsd(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b00 && ext!(v, Word; 31;13) == 0b0000000000000000110 => {
                Inst::CSw(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b00 && ext!(v, Word; 31;13) == 0b0000000000000000111 => {
                Inst::CSd(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01
                && ext!(v, Word; 6;5) == 0b00
                && ext!(v, Word; 31;10) == 0b0000000000000000100011 =>
            {
                Inst::CSub(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01
                && ext!(v, Word; 6;5) == 0b01
                && ext!(v, Word; 31;10) == 0b0000000000000000100011 =>
            {
                Inst::CXor(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01
                && ext!(v, Word; 6;5) == 0b10
                && ext!(v, Word; 31;10) == 0b0000000000000000100011 =>
            {
                Inst::COr(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01
                && ext!(v, Word; 6;5) == 0b11
                && ext!(v, Word; 31;10) == 0b0000000000000000100011 =>
            {
                Inst::CAnd(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01
                && ext!(v, Word; 6;5) == 0b00
                && ext!(v, Word; 31;10) == 0b0000000000000000100111 =>
            {
                Inst::CSubw(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01
                && ext!(v, Word; 6;5) == 0b01
                && ext!(v, Word; 31;10) == 0b0000000000000000100111 =>
            {
                Inst::CAddw(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01 && ext!(v, Word; 31;13) == 0b0000000000000000110 => {
                Inst::CBeqz(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01 && ext!(v, Word; 31;13) == 0b0000000000000000111 => {
                Inst::CBnez(RawInst::new(inst))
            }
            v if ext!(v, Word; 1;0) == 0b01 && ext!(v, Word; 31;13) == 0b0000000000000000101 => {
                Inst::CJ(RawInst::new(inst))
            }
            #[allow(unreachable_patterns)]
            _ => return None,
        })
    }

    #[inline]
    pub fn run(self, vm: &mut VM) -> Result<(), VMRunError> {
        static RUN_TABLE: [fn(RawInst, &mut VM) -> Result<(), VMRunError>; 198] = [
            |inst, vm| Add::run(RunData::new(inst, vm)),
            |inst, vm| Sub::run(RunData::new(inst, vm)),
            |inst, vm| Sll::run(RunData::new(inst, vm)),
            |inst, vm| Slt::run(RunData::new(inst, vm)),
            |inst, vm| Sltu::run(RunData::new(inst, vm)),
            |inst, vm| Xor::run(RunData::new(inst, vm)),
            |inst, vm| Srl::run(RunData::new(inst, vm)),
            |inst, vm| Sra::run(RunData::new(inst, vm)),
            |inst, vm| Or::run(RunData::new(inst, vm)),
            |inst, vm| And::run(RunData::new(inst, vm)),
            |inst, vm| SfenceVma::run(RunData::new(inst, vm)),
            |inst, vm| Addi::run(RunData::new(inst, vm)),
            |inst, vm| Slti::run(RunData::new(inst, vm)),
            |inst, vm| Sltiu::run(RunData::new(inst, vm)),
            |inst, vm| Xori::run(RunData::new(inst, vm)),
            |inst, vm| Ori::run(RunData::new(inst, vm)),
            |inst, vm| Andi::run(RunData::new(inst, vm)),
            |inst, vm| Slli::run(RunData::new(inst, vm)),
            |inst, vm| Srli::run(RunData::new(inst, vm)),
            |inst, vm| Srai::run(RunData::new(inst, vm)),
            |inst, vm| Lb::run(RunData::new(inst, vm)),
            |inst, vm| Lh::run(RunData::new(inst, vm)),
            |inst, vm| Lw::run(RunData::new(inst, vm)),
            |inst, vm| Lbu::run(RunData::new(inst, vm)),
            |inst, vm| Lhu::run(RunData::new(inst, vm)),
            |inst, vm| Jalr::run(RunData::new(inst, vm)),
            |inst, vm| Fence::run(RunData::new(inst, vm)),
            |inst, vm| FenceI::run(RunData::new(inst, vm)),
            |inst, vm| Csrrw::run(RunData::new(inst, vm)),
            |inst, vm| Csrrs::run(RunData::new(inst, vm)),
            |inst, vm| Csrrc::run(RunData::new(inst, vm)),
            |inst, vm| Csrrwi::run(RunData::new(inst, vm)),
            |inst, vm| Csrrsi::run(RunData::new(inst, vm)),
            |inst, vm| Csrrci::run(RunData::new(inst, vm)),
            |inst, vm| Ecall::run(RunData::new(inst, vm)),
            |inst, vm| Ebreak::run(RunData::new(inst, vm)),
            |inst, vm| Uret::run(RunData::new(inst, vm)),
            |inst, vm| Sret::run(RunData::new(inst, vm)),
            |inst, vm| Mret::run(RunData::new(inst, vm)),
            |inst, vm| Wfi::run(RunData::new(inst, vm)),
            |inst, vm| Sb::run(RunData::new(inst, vm)),
            |inst, vm| Sh::run(RunData::new(inst, vm)),
            |inst, vm| Sw::run(RunData::new(inst, vm)),
            |inst, vm| Beq::run(RunData::new(inst, vm)),
            |inst, vm| Bne::run(RunData::new(inst, vm)),
            |inst, vm| Blt::run(RunData::new(inst, vm)),
            |inst, vm| Bge::run(RunData::new(inst, vm)),
            |inst, vm| Bltu::run(RunData::new(inst, vm)),
            |inst, vm| Bgeu::run(RunData::new(inst, vm)),
            |inst, vm| Lui::run(RunData::new(inst, vm)),
            |inst, vm| Auipc::run(RunData::new(inst, vm)),
            |inst, vm| Jal::run(RunData::new(inst, vm)),
            |inst, vm| Addw::run(RunData::new(inst, vm)),
            |inst, vm| Subw::run(RunData::new(inst, vm)),
            |inst, vm| Sllw::run(RunData::new(inst, vm)),
            |inst, vm| Srlw::run(RunData::new(inst, vm)),
            |inst, vm| Sraw::run(RunData::new(inst, vm)),
            |inst, vm| Addiw::run(RunData::new(inst, vm)),
            |inst, vm| Slliw::run(RunData::new(inst, vm)),
            |inst, vm| Srliw::run(RunData::new(inst, vm)),
            |inst, vm| Sraiw::run(RunData::new(inst, vm)),
            |inst, vm| Lwu::run(RunData::new(inst, vm)),
            |inst, vm| Ld::run(RunData::new(inst, vm)),
            |inst, vm| Sd::run(RunData::new(inst, vm)),
            |inst, vm| Mul::run(RunData::new(inst, vm)),
            |inst, vm| Mulh::run(RunData::new(inst, vm)),
            |inst, vm| Mulhsu::run(RunData::new(inst, vm)),
            |inst, vm| Mulhu::run(RunData::new(inst, vm)),
            |inst, vm| Div::run(RunData::new(inst, vm)),
            |inst, vm| Divu::run(RunData::new(inst, vm)),
            |inst, vm| Rem::run(RunData::new(inst, vm)),
            |inst, vm| Remu::run(RunData::new(inst, vm)),
            |inst, vm| Mulw::run(RunData::new(inst, vm)),
            |inst, vm| Divw::run(RunData::new(inst, vm)),
            |inst, vm| Divuw::run(RunData::new(inst, vm)),
            |inst, vm| Remw::run(RunData::new(inst, vm)),
            |inst, vm| Remuw::run(RunData::new(inst, vm)),
            |inst, vm| LrW::run(RunData::new(inst, vm)),
            |inst, vm| ScW::run(RunData::new(inst, vm)),
            |inst, vm| AmoswapW::run(RunData::new(inst, vm)),
            |inst, vm| AmoaddW::run(RunData::new(inst, vm)),
            |inst, vm| AmoxorW::run(RunData::new(inst, vm)),
            |inst, vm| AmoandW::run(RunData::new(inst, vm)),
            |inst, vm| AmoorW::run(RunData::new(inst, vm)),
            |inst, vm| AmominW::run(RunData::new(inst, vm)),
            |inst, vm| AmomaxW::run(RunData::new(inst, vm)),
            |inst, vm| AmominuW::run(RunData::new(inst, vm)),
            |inst, vm| AmomaxuW::run(RunData::new(inst, vm)),
            |inst, vm| LrD::run(RunData::new(inst, vm)),
            |inst, vm| ScD::run(RunData::new(inst, vm)),
            |inst, vm| AmodswapD::run(RunData::new(inst, vm)),
            |inst, vm| AmoaddD::run(RunData::new(inst, vm)),
            |inst, vm| AmoxorD::run(RunData::new(inst, vm)),
            |inst, vm| AmoandD::run(RunData::new(inst, vm)),
            |inst, vm| AmoorD::run(RunData::new(inst, vm)),
            |inst, vm| AmominD::run(RunData::new(inst, vm)),
            |inst, vm| AmomaxD::run(RunData::new(inst, vm)),
            |inst, vm| AmominuD::run(RunData::new(inst, vm)),
            |inst, vm| AmomaxuD::run(RunData::new(inst, vm)),
            |inst, vm| FmaddS::run(RunData::new(inst, vm)),
            |inst, vm| FmsubS::run(RunData::new(inst, vm)),
            |inst, vm| FnmsubS::run(RunData::new(inst, vm)),
            |inst, vm| FnmaddS::run(RunData::new(inst, vm)),
            |inst, vm| FaddS::run(RunData::new(inst, vm)),
            |inst, vm| FsubS::run(RunData::new(inst, vm)),
            |inst, vm| FmulS::run(RunData::new(inst, vm)),
            |inst, vm| FdivS::run(RunData::new(inst, vm)),
            |inst, vm| FsqrtS::run(RunData::new(inst, vm)),
            |inst, vm| FsgnjS::run(RunData::new(inst, vm)),
            |inst, vm| FsgnjnS::run(RunData::new(inst, vm)),
            |inst, vm| FsgnjxS::run(RunData::new(inst, vm)),
            |inst, vm| FminS::run(RunData::new(inst, vm)),
            |inst, vm| FmaxS::run(RunData::new(inst, vm)),
            |inst, vm| FcvtWS::run(RunData::new(inst, vm)),
            |inst, vm| FcvtWuS::run(RunData::new(inst, vm)),
            |inst, vm| FmvXW::run(RunData::new(inst, vm)),
            |inst, vm| FeqS::run(RunData::new(inst, vm)),
            |inst, vm| FltS::run(RunData::new(inst, vm)),
            |inst, vm| FleS::run(RunData::new(inst, vm)),
            |inst, vm| FclassS::run(RunData::new(inst, vm)),
            |inst, vm| FcvtSW::run(RunData::new(inst, vm)),
            |inst, vm| FcvtSWu::run(RunData::new(inst, vm)),
            |inst, vm| FmvWX::run(RunData::new(inst, vm)),
            |inst, vm| FmaddD::run(RunData::new(inst, vm)),
            |inst, vm| FmsubD::run(RunData::new(inst, vm)),
            |inst, vm| FnmsubD::run(RunData::new(inst, vm)),
            |inst, vm| FnmaddD::run(RunData::new(inst, vm)),
            |inst, vm| FaddD::run(RunData::new(inst, vm)),
            |inst, vm| FsubD::run(RunData::new(inst, vm)),
            |inst, vm| FmulD::run(RunData::new(inst, vm)),
            |inst, vm| FdivD::run(RunData::new(inst, vm)),
            |inst, vm| FsqrtD::run(RunData::new(inst, vm)),
            |inst, vm| FsgnjD::run(RunData::new(inst, vm)),
            |inst, vm| FsgnjnD::run(RunData::new(inst, vm)),
            |inst, vm| FsgnjxD::run(RunData::new(inst, vm)),
            |inst, vm| FminD::run(RunData::new(inst, vm)),
            |inst, vm| FmaxD::run(RunData::new(inst, vm)),
            |inst, vm| FcvtSD::run(RunData::new(inst, vm)),
            |inst, vm| FcvtDS::run(RunData::new(inst, vm)),
            |inst, vm| FeqD::run(RunData::new(inst, vm)),
            |inst, vm| FltD::run(RunData::new(inst, vm)),
            |inst, vm| FleD::run(RunData::new(inst, vm)),
            |inst, vm| FclassD::run(RunData::new(inst, vm)),
            |inst, vm| FcvtWD::run(RunData::new(inst, vm)),
            |inst, vm| FcvtWuD::run(RunData::new(inst, vm)),
            |inst, vm| FcvtDW::run(RunData::new(inst, vm)),
            |inst, vm| FcvtDWu::run(RunData::new(inst, vm)),
            |inst, vm| Flw::run(RunData::new(inst, vm)),
            |inst, vm| Fsw::run(RunData::new(inst, vm)),
            |inst, vm| Fld::run(RunData::new(inst, vm)),
            |inst, vm| Fsd::run(RunData::new(inst, vm)),
            |inst, vm| FcvtLS::run(RunData::new(inst, vm)),
            |inst, vm| FcvtLuS::run(RunData::new(inst, vm)),
            |inst, vm| FcvtSL::run(RunData::new(inst, vm)),
            |inst, vm| FcvtSLu::run(RunData::new(inst, vm)),
            |inst, vm| FcvtLD::run(RunData::new(inst, vm)),
            |inst, vm| FcvtLuD::run(RunData::new(inst, vm)),
            |inst, vm| FmvXD::run(RunData::new(inst, vm)),
            |inst, vm| FcvtDL::run(RunData::new(inst, vm)),
            |inst, vm| FcvtDLu::run(RunData::new(inst, vm)),
            |inst, vm| FmvDX::run(RunData::new(inst, vm)),
            |inst, vm| CJr::run(RunData::new(inst, vm)),
            |inst, vm| CMv::run(RunData::new(inst, vm)),
            |inst, vm| CEbreak::run(RunData::new(inst, vm)),
            |inst, vm| CJalr::run(RunData::new(inst, vm)),
            |inst, vm| CAdd::run(RunData::new(inst, vm)),
            |inst, vm| CNop::run(RunData::new(inst, vm)),
            |inst, vm| CAddi::run(RunData::new(inst, vm)),
            |inst, vm| CAddiw::run(RunData::new(inst, vm)),
            |inst, vm| CLi::run(RunData::new(inst, vm)),
            |inst, vm| CAddi16sp::run(RunData::new(inst, vm)),
            |inst, vm| CLui::run(RunData::new(inst, vm)),
            |inst, vm| CSrli::run(RunData::new(inst, vm)),
            |inst, vm| CSrai::run(RunData::new(inst, vm)),
            |inst, vm| CAndi::run(RunData::new(inst, vm)),
            |inst, vm| CSlli::run(RunData::new(inst, vm)),
            |inst, vm| CFldsp::run(RunData::new(inst, vm)),
            |inst, vm| CLwsp::run(RunData::new(inst, vm)),
            |inst, vm| CLdsp::run(RunData::new(inst, vm)),
            |inst, vm| CFsdsp::run(RunData::new(inst, vm)),
            |inst, vm| CSwsp::run(RunData::new(inst, vm)),
            |inst, vm| CSdsp::run(RunData::new(inst, vm)),
            |inst, vm| CAddi4spn::run(RunData::new(inst, vm)),
            |inst, vm| CFld::run(RunData::new(inst, vm)),
            |inst, vm| CLw::run(RunData::new(inst, vm)),
            |inst, vm| CLd::run(RunData::new(inst, vm)),
            |inst, vm| CFsd::run(RunData::new(inst, vm)),
            |inst, vm| CSw::run(RunData::new(inst, vm)),
            |inst, vm| CSd::run(RunData::new(inst, vm)),
            |inst, vm| CSub::run(RunData::new(inst, vm)),
            |inst, vm| CXor::run(RunData::new(inst, vm)),
            |inst, vm| COr::run(RunData::new(inst, vm)),
            |inst, vm| CAnd::run(RunData::new(inst, vm)),
            |inst, vm| CSubw::run(RunData::new(inst, vm)),
            |inst, vm| CAddw::run(RunData::new(inst, vm)),
            |inst, vm| CBeqz::run(RunData::new(inst, vm)),
            |inst, vm| CBnez::run(RunData::new(inst, vm)),
            |inst, vm| CJ::run(RunData::new(inst, vm)),
        ];

        let id = self.discriminant() as usize;
        let raw_inst = self.inner();
        unsafe { RUN_TABLE.get_unchecked(id)(raw_inst, vm) }
    }

    #[inline]
    pub const fn name(self) -> &'static str {
        match self {
            Inst::Add(_) => "add",
            Inst::Sub(_) => "sub",
            Inst::Sll(_) => "sll",
            Inst::Slt(_) => "slt",
            Inst::Sltu(_) => "sltu",
            Inst::Xor(_) => "xor",
            Inst::Srl(_) => "srl",
            Inst::Sra(_) => "sra",
            Inst::Or(_) => "or",
            Inst::And(_) => "and",
            Inst::SfenceVma(_) => "sfence.vma",
            Inst::Addi(_) => "addi",
            Inst::Slti(_) => "slti",
            Inst::Sltiu(_) => "sltiu",
            Inst::Xori(_) => "xori",
            Inst::Ori(_) => "ori",
            Inst::Andi(_) => "andi",
            Inst::Slli(_) => "slli",
            Inst::Srli(_) => "srli",
            Inst::Srai(_) => "srai",
            Inst::Lb(_) => "lb",
            Inst::Lh(_) => "lh",
            Inst::Lw(_) => "lw",
            Inst::Lbu(_) => "lbu",
            Inst::Lhu(_) => "lhu",
            Inst::Jalr(_) => "jalr",
            Inst::Fence(_) => "fence",
            Inst::FenceI(_) => "fence.i",
            Inst::Csrrw(_) => "csrrw",
            Inst::Csrrs(_) => "csrrs",
            Inst::Csrrc(_) => "csrrc",
            Inst::Csrrwi(_) => "csrrwi",
            Inst::Csrrsi(_) => "csrrsi",
            Inst::Csrrci(_) => "csrrci",
            Inst::Ecall(_) => "ecall",
            Inst::Ebreak(_) => "ebreak",
            Inst::Uret(_) => "uret",
            Inst::Sret(_) => "sret",
            Inst::Mret(_) => "mret",
            Inst::Wfi(_) => "wfi",
            Inst::Sb(_) => "sb",
            Inst::Sh(_) => "sh",
            Inst::Sw(_) => "sw",
            Inst::Beq(_) => "beq",
            Inst::Bne(_) => "bne",
            Inst::Blt(_) => "blt",
            Inst::Bge(_) => "bge",
            Inst::Bltu(_) => "bltu",
            Inst::Bgeu(_) => "bgeu",
            Inst::Lui(_) => "lui",
            Inst::Auipc(_) => "auipc",
            Inst::Jal(_) => "jal",
            Inst::Addw(_) => "addw",
            Inst::Subw(_) => "subw",
            Inst::Sllw(_) => "sllw",
            Inst::Srlw(_) => "srlw",
            Inst::Sraw(_) => "sraw",
            Inst::Addiw(_) => "addiw",
            Inst::Slliw(_) => "slliw",
            Inst::Srliw(_) => "srliw",
            Inst::Sraiw(_) => "sraiw",
            Inst::Lwu(_) => "lwu",
            Inst::Ld(_) => "ld",
            Inst::Sd(_) => "sd",
            Inst::Mul(_) => "mul",
            Inst::Mulh(_) => "mulh",
            Inst::Mulhsu(_) => "mulhsu",
            Inst::Mulhu(_) => "mulhu",
            Inst::Div(_) => "div",
            Inst::Divu(_) => "divu",
            Inst::Rem(_) => "rem",
            Inst::Remu(_) => "remu",
            Inst::Mulw(_) => "mulw",
            Inst::Divw(_) => "divw",
            Inst::Divuw(_) => "divuw",
            Inst::Remw(_) => "remw",
            Inst::Remuw(_) => "remuw",
            Inst::LrW(_) => "lr.w",
            Inst::ScW(_) => "sc.w",
            Inst::AmoswapW(_) => "amoswap.w",
            Inst::AmoaddW(_) => "amoadd.w",
            Inst::AmoxorW(_) => "amoxor.w",
            Inst::AmoandW(_) => "amoand.w",
            Inst::AmoorW(_) => "amoor.w",
            Inst::AmominW(_) => "amomin.w",
            Inst::AmomaxW(_) => "amomax.w",
            Inst::AmominuW(_) => "amominu.w",
            Inst::AmomaxuW(_) => "amomaxu.w",
            Inst::LrD(_) => "lr.d",
            Inst::ScD(_) => "sc.d",
            Inst::AmodswapD(_) => "amodswap.d",
            Inst::AmoaddD(_) => "amoadd.d",
            Inst::AmoxorD(_) => "amoxor.d",
            Inst::AmoandD(_) => "amoand.d",
            Inst::AmoorD(_) => "amoor.d",
            Inst::AmominD(_) => "amomin.d",
            Inst::AmomaxD(_) => "amomax.d",
            Inst::AmominuD(_) => "amominu.d",
            Inst::AmomaxuD(_) => "amomaxu.d",
            Inst::FmaddS(_) => "fmadd.s",
            Inst::FmsubS(_) => "fmsub.s",
            Inst::FnmsubS(_) => "fnmsub.s",
            Inst::FnmaddS(_) => "fnmadd.s",
            Inst::FaddS(_) => "fadd.s",
            Inst::FsubS(_) => "fsub.s",
            Inst::FmulS(_) => "fmul.s",
            Inst::FdivS(_) => "fdiv.s",
            Inst::FsqrtS(_) => "fsqrt.s",
            Inst::FsgnjS(_) => "fsgnj.s",
            Inst::FsgnjnS(_) => "fsgnjn.s",
            Inst::FsgnjxS(_) => "fsgnjx.s",
            Inst::FminS(_) => "fmin.s",
            Inst::FmaxS(_) => "fmax.s",
            Inst::FcvtWS(_) => "fcvt.w.s",
            Inst::FcvtWuS(_) => "fcvt.wu.s",
            Inst::FmvXW(_) => "fmv.x.w",
            Inst::FeqS(_) => "feq.s",
            Inst::FltS(_) => "flt.s",
            Inst::FleS(_) => "fle.s",
            Inst::FclassS(_) => "fclass.s",
            Inst::FcvtSW(_) => "fcvt.s.w",
            Inst::FcvtSWu(_) => "fcvt.s.wu",
            Inst::FmvWX(_) => "fmv.w.x",
            Inst::FmaddD(_) => "fmadd.d",
            Inst::FmsubD(_) => "fmsub.d",
            Inst::FnmsubD(_) => "fnmsub.d",
            Inst::FnmaddD(_) => "fnmadd.d",
            Inst::FaddD(_) => "fadd.d",
            Inst::FsubD(_) => "fsub.d",
            Inst::FmulD(_) => "fmul.d",
            Inst::FdivD(_) => "fdiv.d",
            Inst::FsqrtD(_) => "fsqrt.d",
            Inst::FsgnjD(_) => "fsgnj.d",
            Inst::FsgnjnD(_) => "fsgnjn.d",
            Inst::FsgnjxD(_) => "fsgnjx.d",
            Inst::FminD(_) => "fmin.d",
            Inst::FmaxD(_) => "fmax.d",
            Inst::FcvtSD(_) => "fcvt.s.d",
            Inst::FcvtDS(_) => "fcvt.d.s",
            Inst::FeqD(_) => "feq.d",
            Inst::FltD(_) => "flt.d",
            Inst::FleD(_) => "fle.d",
            Inst::FclassD(_) => "fclass.d",
            Inst::FcvtWD(_) => "fcvt.w.d",
            Inst::FcvtWuD(_) => "fcvt.wu.d",
            Inst::FcvtDW(_) => "fcvt.d.w",
            Inst::FcvtDWu(_) => "fcvt.d.wu",
            Inst::Flw(_) => "flw",
            Inst::Fsw(_) => "fsw",
            Inst::Fld(_) => "fld",
            Inst::Fsd(_) => "fsd",
            Inst::FcvtLS(_) => "fcvt.l.s",
            Inst::FcvtLuS(_) => "fcvt.lu.s",
            Inst::FcvtSL(_) => "fcvt.s.l",
            Inst::FcvtSLu(_) => "fcvt.s.lu",
            Inst::FcvtLD(_) => "fcvt.l.d",
            Inst::FcvtLuD(_) => "fcvt.lu.d",
            Inst::FmvXD(_) => "fmv.x.d",
            Inst::FcvtDL(_) => "fcvt.d.l",
            Inst::FcvtDLu(_) => "fcvt.d.lu",
            Inst::FmvDX(_) => "fmv.d.x",
            Inst::CJr(_) => "c.jr",
            Inst::CMv(_) => "c.mv",
            Inst::CEbreak(_) => "c.ebreak",
            Inst::CJalr(_) => "c.jalr",
            Inst::CAdd(_) => "c.add",
            Inst::CNop(_) => "c.nop",
            Inst::CAddi(_) => "c.addi",
            Inst::CAddiw(_) => "c.addiw",
            Inst::CLi(_) => "c.li",
            Inst::CAddi16sp(_) => "c.addi16sp",
            Inst::CLui(_) => "c.lui",
            Inst::CSrli(_) => "c.srli",
            Inst::CSrai(_) => "c.srai",
            Inst::CAndi(_) => "c.andi",
            Inst::CSlli(_) => "c.slli",
            Inst::CFldsp(_) => "c.fldsp",
            Inst::CLwsp(_) => "c.lwsp",
            Inst::CLdsp(_) => "c.ldsp",
            Inst::CFsdsp(_) => "c.fsdsp",
            Inst::CSwsp(_) => "c.swsp",
            Inst::CSdsp(_) => "c.sdsp",
            Inst::CAddi4spn(_) => "c.addi4spn",
            Inst::CFld(_) => "c.fld",
            Inst::CLw(_) => "c.lw",
            Inst::CLd(_) => "c.ld",
            Inst::CFsd(_) => "c.fsd",
            Inst::CSw(_) => "c.sw",
            Inst::CSd(_) => "c.sd",
            Inst::CSub(_) => "c.sub",
            Inst::CXor(_) => "c.xor",
            Inst::COr(_) => "c.or",
            Inst::CAnd(_) => "c.and",
            Inst::CSubw(_) => "c.subw",
            Inst::CAddw(_) => "c.addw",
            Inst::CBeqz(_) => "c.beqz",
            Inst::CBnez(_) => "c.bnez",
            Inst::CJ(_) => "c.j",
        }
    }

    #[inline]
    pub const fn format(self) -> Format {
        match self {
            Inst::Add(_) => Format::R,
            Inst::Sub(_) => Format::R,
            Inst::Sll(_) => Format::R,
            Inst::Slt(_) => Format::R,
            Inst::Sltu(_) => Format::R,
            Inst::Xor(_) => Format::R,
            Inst::Srl(_) => Format::R,
            Inst::Sra(_) => Format::R,
            Inst::Or(_) => Format::R,
            Inst::And(_) => Format::R,
            Inst::SfenceVma(_) => Format::R,
            Inst::Addi(_) => Format::I,
            Inst::Slti(_) => Format::I,
            Inst::Sltiu(_) => Format::I,
            Inst::Xori(_) => Format::I,
            Inst::Ori(_) => Format::I,
            Inst::Andi(_) => Format::I,
            Inst::Slli(_) => Format::I,
            Inst::Srli(_) => Format::I,
            Inst::Srai(_) => Format::I,
            Inst::Lb(_) => Format::I,
            Inst::Lh(_) => Format::I,
            Inst::Lw(_) => Format::I,
            Inst::Lbu(_) => Format::I,
            Inst::Lhu(_) => Format::I,
            Inst::Jalr(_) => Format::I,
            Inst::Fence(_) => Format::I,
            Inst::FenceI(_) => Format::I,
            Inst::Csrrw(_) => Format::I,
            Inst::Csrrs(_) => Format::I,
            Inst::Csrrc(_) => Format::I,
            Inst::Csrrwi(_) => Format::I,
            Inst::Csrrsi(_) => Format::I,
            Inst::Csrrci(_) => Format::I,
            Inst::Ecall(_) => Format::I,
            Inst::Ebreak(_) => Format::I,
            Inst::Uret(_) => Format::I,
            Inst::Sret(_) => Format::I,
            Inst::Mret(_) => Format::I,
            Inst::Wfi(_) => Format::I,
            Inst::Sb(_) => Format::S,
            Inst::Sh(_) => Format::S,
            Inst::Sw(_) => Format::S,
            Inst::Beq(_) => Format::B,
            Inst::Bne(_) => Format::B,
            Inst::Blt(_) => Format::B,
            Inst::Bge(_) => Format::B,
            Inst::Bltu(_) => Format::B,
            Inst::Bgeu(_) => Format::B,
            Inst::Lui(_) => Format::U,
            Inst::Auipc(_) => Format::U,
            Inst::Jal(_) => Format::J,
            Inst::Addw(_) => Format::R,
            Inst::Subw(_) => Format::R,
            Inst::Sllw(_) => Format::R,
            Inst::Srlw(_) => Format::R,
            Inst::Sraw(_) => Format::R,
            Inst::Addiw(_) => Format::I,
            Inst::Slliw(_) => Format::I,
            Inst::Srliw(_) => Format::I,
            Inst::Sraiw(_) => Format::I,
            Inst::Lwu(_) => Format::I,
            Inst::Ld(_) => Format::I,
            Inst::Sd(_) => Format::S,
            Inst::Mul(_) => Format::R,
            Inst::Mulh(_) => Format::R,
            Inst::Mulhsu(_) => Format::R,
            Inst::Mulhu(_) => Format::R,
            Inst::Div(_) => Format::R,
            Inst::Divu(_) => Format::R,
            Inst::Rem(_) => Format::R,
            Inst::Remu(_) => Format::R,
            Inst::Mulw(_) => Format::R,
            Inst::Divw(_) => Format::R,
            Inst::Divuw(_) => Format::R,
            Inst::Remw(_) => Format::R,
            Inst::Remuw(_) => Format::R,
            Inst::LrW(_) => Format::R,
            Inst::ScW(_) => Format::R,
            Inst::AmoswapW(_) => Format::R,
            Inst::AmoaddW(_) => Format::R,
            Inst::AmoxorW(_) => Format::R,
            Inst::AmoandW(_) => Format::R,
            Inst::AmoorW(_) => Format::R,
            Inst::AmominW(_) => Format::R,
            Inst::AmomaxW(_) => Format::R,
            Inst::AmominuW(_) => Format::R,
            Inst::AmomaxuW(_) => Format::R,
            Inst::LrD(_) => Format::R,
            Inst::ScD(_) => Format::R,
            Inst::AmodswapD(_) => Format::R,
            Inst::AmoaddD(_) => Format::R,
            Inst::AmoxorD(_) => Format::R,
            Inst::AmoandD(_) => Format::R,
            Inst::AmoorD(_) => Format::R,
            Inst::AmominD(_) => Format::R,
            Inst::AmomaxD(_) => Format::R,
            Inst::AmominuD(_) => Format::R,
            Inst::AmomaxuD(_) => Format::R,
            Inst::FmaddS(_) => Format::R,
            Inst::FmsubS(_) => Format::R,
            Inst::FnmsubS(_) => Format::R,
            Inst::FnmaddS(_) => Format::R,
            Inst::FaddS(_) => Format::R,
            Inst::FsubS(_) => Format::R,
            Inst::FmulS(_) => Format::R,
            Inst::FdivS(_) => Format::R,
            Inst::FsqrtS(_) => Format::R,
            Inst::FsgnjS(_) => Format::R,
            Inst::FsgnjnS(_) => Format::R,
            Inst::FsgnjxS(_) => Format::R,
            Inst::FminS(_) => Format::R,
            Inst::FmaxS(_) => Format::R,
            Inst::FcvtWS(_) => Format::R,
            Inst::FcvtWuS(_) => Format::R,
            Inst::FmvXW(_) => Format::R,
            Inst::FeqS(_) => Format::R,
            Inst::FltS(_) => Format::R,
            Inst::FleS(_) => Format::R,
            Inst::FclassS(_) => Format::R,
            Inst::FcvtSW(_) => Format::R,
            Inst::FcvtSWu(_) => Format::R,
            Inst::FmvWX(_) => Format::R,
            Inst::FmaddD(_) => Format::R,
            Inst::FmsubD(_) => Format::R,
            Inst::FnmsubD(_) => Format::R,
            Inst::FnmaddD(_) => Format::R,
            Inst::FaddD(_) => Format::R,
            Inst::FsubD(_) => Format::R,
            Inst::FmulD(_) => Format::R,
            Inst::FdivD(_) => Format::R,
            Inst::FsqrtD(_) => Format::R,
            Inst::FsgnjD(_) => Format::R,
            Inst::FsgnjnD(_) => Format::R,
            Inst::FsgnjxD(_) => Format::R,
            Inst::FminD(_) => Format::R,
            Inst::FmaxD(_) => Format::R,
            Inst::FcvtSD(_) => Format::R,
            Inst::FcvtDS(_) => Format::R,
            Inst::FeqD(_) => Format::R,
            Inst::FltD(_) => Format::R,
            Inst::FleD(_) => Format::R,
            Inst::FclassD(_) => Format::R,
            Inst::FcvtWD(_) => Format::R,
            Inst::FcvtWuD(_) => Format::R,
            Inst::FcvtDW(_) => Format::R,
            Inst::FcvtDWu(_) => Format::R,
            Inst::Flw(_) => Format::R,
            Inst::Fsw(_) => Format::R,
            Inst::Fld(_) => Format::R,
            Inst::Fsd(_) => Format::R,
            Inst::FcvtLS(_) => Format::R,
            Inst::FcvtLuS(_) => Format::R,
            Inst::FcvtSL(_) => Format::R,
            Inst::FcvtSLu(_) => Format::R,
            Inst::FcvtLD(_) => Format::R,
            Inst::FcvtLuD(_) => Format::R,
            Inst::FmvXD(_) => Format::R,
            Inst::FcvtDL(_) => Format::R,
            Inst::FcvtDLu(_) => Format::R,
            Inst::FmvDX(_) => Format::R,
            Inst::CJr(_) => Format::CR,
            Inst::CMv(_) => Format::CR,
            Inst::CEbreak(_) => Format::CR,
            Inst::CJalr(_) => Format::CR,
            Inst::CAdd(_) => Format::CR,
            Inst::CNop(_) => Format::CI,
            Inst::CAddi(_) => Format::CI,
            Inst::CAddiw(_) => Format::CI,
            Inst::CLi(_) => Format::CI,
            Inst::CAddi16sp(_) => Format::CI,
            Inst::CLui(_) => Format::CI,
            Inst::CSrli(_) => Format::CI,
            Inst::CSrai(_) => Format::CI,
            Inst::CAndi(_) => Format::CI,
            Inst::CSlli(_) => Format::CI,
            Inst::CFldsp(_) => Format::CI,
            Inst::CLwsp(_) => Format::CI,
            Inst::CLdsp(_) => Format::CI,
            Inst::CFsdsp(_) => Format::CSS,
            Inst::CSwsp(_) => Format::CSS,
            Inst::CSdsp(_) => Format::CSS,
            Inst::CAddi4spn(_) => Format::CIW,
            Inst::CFld(_) => Format::CL,
            Inst::CLw(_) => Format::CL,
            Inst::CLd(_) => Format::CL,
            Inst::CFsd(_) => Format::CS,
            Inst::CSw(_) => Format::CS,
            Inst::CSd(_) => Format::CS,
            Inst::CSub(_) => Format::CA,
            Inst::CXor(_) => Format::CA,
            Inst::COr(_) => Format::CA,
            Inst::CAnd(_) => Format::CA,
            Inst::CSubw(_) => Format::CA,
            Inst::CAddw(_) => Format::CA,
            Inst::CBeqz(_) => Format::CB,
            Inst::CBnez(_) => Format::CB,
            Inst::CJ(_) => Format::CJ,
        }
    }

    #[inline]
    pub const fn inner(self) -> RawInst {
        match self {
            Inst::Add(v) => v,
            Inst::Sub(v) => v,
            Inst::Sll(v) => v,
            Inst::Slt(v) => v,
            Inst::Sltu(v) => v,
            Inst::Xor(v) => v,
            Inst::Srl(v) => v,
            Inst::Sra(v) => v,
            Inst::Or(v) => v,
            Inst::And(v) => v,
            Inst::SfenceVma(v) => v,
            Inst::Addi(v) => v,
            Inst::Slti(v) => v,
            Inst::Sltiu(v) => v,
            Inst::Xori(v) => v,
            Inst::Ori(v) => v,
            Inst::Andi(v) => v,
            Inst::Slli(v) => v,
            Inst::Srli(v) => v,
            Inst::Srai(v) => v,
            Inst::Lb(v) => v,
            Inst::Lh(v) => v,
            Inst::Lw(v) => v,
            Inst::Lbu(v) => v,
            Inst::Lhu(v) => v,
            Inst::Jalr(v) => v,
            Inst::Fence(v) => v,
            Inst::FenceI(v) => v,
            Inst::Csrrw(v) => v,
            Inst::Csrrs(v) => v,
            Inst::Csrrc(v) => v,
            Inst::Csrrwi(v) => v,
            Inst::Csrrsi(v) => v,
            Inst::Csrrci(v) => v,
            Inst::Ecall(v) => v,
            Inst::Ebreak(v) => v,
            Inst::Uret(v) => v,
            Inst::Sret(v) => v,
            Inst::Mret(v) => v,
            Inst::Wfi(v) => v,
            Inst::Sb(v) => v,
            Inst::Sh(v) => v,
            Inst::Sw(v) => v,
            Inst::Beq(v) => v,
            Inst::Bne(v) => v,
            Inst::Blt(v) => v,
            Inst::Bge(v) => v,
            Inst::Bltu(v) => v,
            Inst::Bgeu(v) => v,
            Inst::Lui(v) => v,
            Inst::Auipc(v) => v,
            Inst::Jal(v) => v,
            Inst::Addw(v) => v,
            Inst::Subw(v) => v,
            Inst::Sllw(v) => v,
            Inst::Srlw(v) => v,
            Inst::Sraw(v) => v,
            Inst::Addiw(v) => v,
            Inst::Slliw(v) => v,
            Inst::Srliw(v) => v,
            Inst::Sraiw(v) => v,
            Inst::Lwu(v) => v,
            Inst::Ld(v) => v,
            Inst::Sd(v) => v,
            Inst::Mul(v) => v,
            Inst::Mulh(v) => v,
            Inst::Mulhsu(v) => v,
            Inst::Mulhu(v) => v,
            Inst::Div(v) => v,
            Inst::Divu(v) => v,
            Inst::Rem(v) => v,
            Inst::Remu(v) => v,
            Inst::Mulw(v) => v,
            Inst::Divw(v) => v,
            Inst::Divuw(v) => v,
            Inst::Remw(v) => v,
            Inst::Remuw(v) => v,
            Inst::LrW(v) => v,
            Inst::ScW(v) => v,
            Inst::AmoswapW(v) => v,
            Inst::AmoaddW(v) => v,
            Inst::AmoxorW(v) => v,
            Inst::AmoandW(v) => v,
            Inst::AmoorW(v) => v,
            Inst::AmominW(v) => v,
            Inst::AmomaxW(v) => v,
            Inst::AmominuW(v) => v,
            Inst::AmomaxuW(v) => v,
            Inst::LrD(v) => v,
            Inst::ScD(v) => v,
            Inst::AmodswapD(v) => v,
            Inst::AmoaddD(v) => v,
            Inst::AmoxorD(v) => v,
            Inst::AmoandD(v) => v,
            Inst::AmoorD(v) => v,
            Inst::AmominD(v) => v,
            Inst::AmomaxD(v) => v,
            Inst::AmominuD(v) => v,
            Inst::AmomaxuD(v) => v,
            Inst::FmaddS(v) => v,
            Inst::FmsubS(v) => v,
            Inst::FnmsubS(v) => v,
            Inst::FnmaddS(v) => v,
            Inst::FaddS(v) => v,
            Inst::FsubS(v) => v,
            Inst::FmulS(v) => v,
            Inst::FdivS(v) => v,
            Inst::FsqrtS(v) => v,
            Inst::FsgnjS(v) => v,
            Inst::FsgnjnS(v) => v,
            Inst::FsgnjxS(v) => v,
            Inst::FminS(v) => v,
            Inst::FmaxS(v) => v,
            Inst::FcvtWS(v) => v,
            Inst::FcvtWuS(v) => v,
            Inst::FmvXW(v) => v,
            Inst::FeqS(v) => v,
            Inst::FltS(v) => v,
            Inst::FleS(v) => v,
            Inst::FclassS(v) => v,
            Inst::FcvtSW(v) => v,
            Inst::FcvtSWu(v) => v,
            Inst::FmvWX(v) => v,
            Inst::FmaddD(v) => v,
            Inst::FmsubD(v) => v,
            Inst::FnmsubD(v) => v,
            Inst::FnmaddD(v) => v,
            Inst::FaddD(v) => v,
            Inst::FsubD(v) => v,
            Inst::FmulD(v) => v,
            Inst::FdivD(v) => v,
            Inst::FsqrtD(v) => v,
            Inst::FsgnjD(v) => v,
            Inst::FsgnjnD(v) => v,
            Inst::FsgnjxD(v) => v,
            Inst::FminD(v) => v,
            Inst::FmaxD(v) => v,
            Inst::FcvtSD(v) => v,
            Inst::FcvtDS(v) => v,
            Inst::FeqD(v) => v,
            Inst::FltD(v) => v,
            Inst::FleD(v) => v,
            Inst::FclassD(v) => v,
            Inst::FcvtWD(v) => v,
            Inst::FcvtWuD(v) => v,
            Inst::FcvtDW(v) => v,
            Inst::FcvtDWu(v) => v,
            Inst::Flw(v) => v,
            Inst::Fsw(v) => v,
            Inst::Fld(v) => v,
            Inst::Fsd(v) => v,
            Inst::FcvtLS(v) => v,
            Inst::FcvtLuS(v) => v,
            Inst::FcvtSL(v) => v,
            Inst::FcvtSLu(v) => v,
            Inst::FcvtLD(v) => v,
            Inst::FcvtLuD(v) => v,
            Inst::FmvXD(v) => v,
            Inst::FcvtDL(v) => v,
            Inst::FcvtDLu(v) => v,
            Inst::FmvDX(v) => v,
            Inst::CJr(v) => v,
            Inst::CMv(v) => v,
            Inst::CEbreak(v) => v,
            Inst::CJalr(v) => v,
            Inst::CAdd(v) => v,
            Inst::CNop(v) => v,
            Inst::CAddi(v) => v,
            Inst::CAddiw(v) => v,
            Inst::CLi(v) => v,
            Inst::CAddi16sp(v) => v,
            Inst::CLui(v) => v,
            Inst::CSrli(v) => v,
            Inst::CSrai(v) => v,
            Inst::CAndi(v) => v,
            Inst::CSlli(v) => v,
            Inst::CFldsp(v) => v,
            Inst::CLwsp(v) => v,
            Inst::CLdsp(v) => v,
            Inst::CFsdsp(v) => v,
            Inst::CSwsp(v) => v,
            Inst::CSdsp(v) => v,
            Inst::CAddi4spn(v) => v,
            Inst::CFld(v) => v,
            Inst::CLw(v) => v,
            Inst::CLd(v) => v,
            Inst::CFsd(v) => v,
            Inst::CSw(v) => v,
            Inst::CSd(v) => v,
            Inst::CSub(v) => v,
            Inst::CXor(v) => v,
            Inst::COr(v) => v,
            Inst::CAnd(v) => v,
            Inst::CSubw(v) => v,
            Inst::CAddw(v) => v,
            Inst::CBeqz(v) => v,
            Inst::CBnez(v) => v,
            Inst::CJ(v) => v,
        }
    }

    #[inline]
    pub const fn raw(self) -> Word {
        self.inner().raw()
    }

    #[inline]
    pub const fn discriminant(&self) -> u8 {
        unsafe { std::mem::transmute_copy::<Self, u8>(self) }
    }
}
