// $GEN_VERSION 2
// This file is auto-generated.
// Do not edit this file manually, use `gen_inst.py` to regenerate it.
#![allow(
    dead_code,
    unused_variables,
    unused_imports,
    unreachable_code,
    unused_mut
)]
use crate::bits::*;
use crate::format::*;
use crate::{VM, VMRunError, VMRunErrorKind};

mod rv32i_rv64i;
use rv32i_rv64i::*;

mod rv64i;
use rv64i::*;

mod rv32m_rv64m;
use rv32m_rv64m::*;

mod rv64m;
use rv64m::*;

#[derive(Debug, Clone, Copy)]
pub enum Inst {
    // RV32I_RV64I
    Add { rd: u8, rs1: u8, rs2: u8 },
    Sub { rd: u8, rs1: u8, rs2: u8 },
    Sll { rd: u8, rs1: u8, rs2: u8 },
    Slt { rd: u8, rs1: u8, rs2: u8 },
    Sltu { rd: u8, rs1: u8, rs2: u8 },
    Xor { rd: u8, rs1: u8, rs2: u8 },
    Srl { rd: u8, rs1: u8, rs2: u8 },
    Sra { rd: u8, rs1: u8, rs2: u8 },
    Or { rd: u8, rs1: u8, rs2: u8 },
    And { rd: u8, rs1: u8, rs2: u8 },
    SfenceVma { rd: u8, rs1: u8, rs2: u8 },
    Addi { rd: u8, rs1: u8, imm: i16 },
    Slti { rd: u8, rs1: u8, imm: i16 },
    Sltiu { rd: u8, rs1: u8, imm: i16 },
    Xori { rd: u8, rs1: u8, imm: i16 },
    Ori { rd: u8, rs1: u8, imm: i16 },
    Andi { rd: u8, rs1: u8, imm: i16 },
    Slli { rd: u8, rs1: u8, imm: i16 },
    Srli { rd: u8, rs1: u8, imm: i16 },
    Srai { rd: u8, rs1: u8, imm: i16 },
    Lb { rd: u8, rs1: u8, imm: i16 },
    Lh { rd: u8, rs1: u8, imm: i16 },
    Lw { rd: u8, rs1: u8, imm: i16 },
    Lbu { rd: u8, rs1: u8, imm: i16 },
    Lhu { rd: u8, rs1: u8, imm: i16 },
    Jalr { rd: u8, rs1: u8, imm: i16 },
    Fence { rd: u8, rs1: u8, imm: i16 },
    FenceI { rd: u8, rs1: u8, imm: i16 },
    Csrrw { rd: u8, rs1: u8, imm: i16 },
    Csrrs { rd: u8, rs1: u8, imm: i16 },
    Csrrc { rd: u8, rs1: u8, imm: i16 },
    Csrrwi { rd: u8, rs1: u8, imm: i16 },
    Csrrsi { rd: u8, rs1: u8, imm: i16 },
    Csrrci { rd: u8, rs1: u8, imm: i16 },
    Ecall { rd: u8, rs1: u8, imm: i16 },
    Ebreak { rd: u8, rs1: u8, imm: i16 },
    Uret { rd: u8, rs1: u8, imm: i16 },
    Sret { rd: u8, rs1: u8, imm: i16 },
    Mret { rd: u8, rs1: u8, imm: i16 },
    Wfi { rd: u8, rs1: u8, imm: i16 },
    Sb { rs1: u8, rs2: u8, imm: i16 },
    Sh { rs1: u8, rs2: u8, imm: i16 },
    Sw { rs1: u8, rs2: u8, imm: i16 },
    Beq { rs1: u8, rs2: u8, imm: i16 },
    Bne { rs1: u8, rs2: u8, imm: i16 },
    Blt { rs1: u8, rs2: u8, imm: i16 },
    Bge { rs1: u8, rs2: u8, imm: i16 },
    Bltu { rs1: u8, rs2: u8, imm: i16 },
    Bgeu { rs1: u8, rs2: u8, imm: i16 },
    Lui { rd: u8, imm: i32 },
    Auipc { rd: u8, imm: i32 },
    Jal { rd: u8, imm: i32 },

    // RV64I
    Addw { rd: u8, rs1: u8, rs2: u8 },
    Subw { rd: u8, rs1: u8, rs2: u8 },
    Sllw { rd: u8, rs1: u8, rs2: u8 },
    Srlw { rd: u8, rs1: u8, rs2: u8 },
    Sraw { rd: u8, rs1: u8, rs2: u8 },
    Addiw { rd: u8, rs1: u8, imm: i16 },
    Slliw { rd: u8, rs1: u8, imm: i16 },
    Srliw { rd: u8, rs1: u8, imm: i16 },
    Sraiw { rd: u8, rs1: u8, imm: i16 },
    Lwu { rd: u8, rs1: u8, imm: i16 },
    Ld { rd: u8, rs1: u8, imm: i16 },
    Sd { rs1: u8, rs2: u8, imm: i16 },

    // RV32M_RV64M
    Mul { rd: u8, rs1: u8, rs2: u8 },
    Mulh { rd: u8, rs1: u8, rs2: u8 },
    Mulhsu { rd: u8, rs1: u8, rs2: u8 },
    Mulhu { rd: u8, rs1: u8, rs2: u8 },
    Div { rd: u8, rs1: u8, rs2: u8 },
    Divu { rd: u8, rs1: u8, rs2: u8 },
    Rem { rd: u8, rs1: u8, rs2: u8 },
    Remu { rd: u8, rs1: u8, rs2: u8 },

    // RV64M
    Mulw { rd: u8, rs1: u8, rs2: u8 },
    Divw { rd: u8, rs1: u8, rs2: u8 },
    Divuw { rd: u8, rs1: u8, rs2: u8 },
    Remw { rd: u8, rs1: u8, rs2: u8 },
    Remuw { rd: u8, rs1: u8, rs2: u8 },
}

impl Inst {
    pub fn decode(fmt: RawFormat) -> Option<Self> {
        use RawFormat::*;
        Some(match fmt {
            R {
                opc,
                f3,
                f7,
                rd,
                rs1,
                rs2,
            } => match (opc, f3, f7, rd, rs1, rs2) {
                (0b01100, 0b000, 0b0000000, _, _, _) => Inst::Add { rd, rs1, rs2 },
                (0b01100, 0b000, 0b0100000, _, _, _) => Inst::Sub { rd, rs1, rs2 },
                (0b01100, 0b001, 0b0000000, _, _, _) => Inst::Sll { rd, rs1, rs2 },
                (0b01100, 0b010, 0b0000000, _, _, _) => Inst::Slt { rd, rs1, rs2 },
                (0b01100, 0b011, 0b0000000, _, _, _) => Inst::Sltu { rd, rs1, rs2 },
                (0b01100, 0b100, 0b0000000, _, _, _) => Inst::Xor { rd, rs1, rs2 },
                (0b01100, 0b101, 0b0000000, _, _, _) => Inst::Srl { rd, rs1, rs2 },
                (0b01100, 0b101, 0b0100000, _, _, _) => Inst::Sra { rd, rs1, rs2 },
                (0b01100, 0b110, 0b0000000, _, _, _) => Inst::Or { rd, rs1, rs2 },
                (0b01100, 0b111, 0b0000000, _, _, _) => Inst::And { rd, rs1, rs2 },
                (0b11100, 0b000, 0b0001001, _, _, _) => Inst::SfenceVma { rd, rs1, rs2 },
                (0b01110, 0b000, 0b0000000, _, _, _) => Inst::Addw { rd, rs1, rs2 },
                (0b01110, 0b000, 0b0100000, _, _, _) => Inst::Subw { rd, rs1, rs2 },
                (0b01110, 0b001, 0b0000000, _, _, _) => Inst::Sllw { rd, rs1, rs2 },
                (0b01110, 0b101, 0b0000000, _, _, _) => Inst::Srlw { rd, rs1, rs2 },
                (0b01110, 0b101, 0b0100000, _, _, _) => Inst::Sraw { rd, rs1, rs2 },
                (0b01100, 0b000, 0b0000001, _, _, _) => Inst::Mul { rd, rs1, rs2 },
                (0b01100, 0b001, 0b0000001, _, _, _) => Inst::Mulh { rd, rs1, rs2 },
                (0b01100, 0b010, 0b0000001, _, _, _) => Inst::Mulhsu { rd, rs1, rs2 },
                (0b01100, 0b011, 0b0000001, _, _, _) => Inst::Mulhu { rd, rs1, rs2 },
                (0b01100, 0b100, 0b0000001, _, _, _) => Inst::Div { rd, rs1, rs2 },
                (0b01100, 0b101, 0b0000001, _, _, _) => Inst::Divu { rd, rs1, rs2 },
                (0b01100, 0b110, 0b0000001, _, _, _) => Inst::Rem { rd, rs1, rs2 },
                (0b01100, 0b111, 0b0000001, _, _, _) => Inst::Remu { rd, rs1, rs2 },
                (0b01110, 0b000, 0b0000001, _, _, _) => Inst::Mulw { rd, rs1, rs2 },
                (0b01110, 0b100, 0b0000001, _, _, _) => Inst::Divw { rd, rs1, rs2 },
                (0b01110, 0b101, 0b0000001, _, _, _) => Inst::Divuw { rd, rs1, rs2 },
                (0b01110, 0b110, 0b0000001, _, _, _) => Inst::Remw { rd, rs1, rs2 },
                (0b01110, 0b111, 0b0000001, _, _, _) => Inst::Remuw { rd, rs1, rs2 },

                #[allow(unreachable_patterns)]
                _ => return None,
            },
            I {
                opc,
                f3,
                rd,
                rs1,
                imm,
            } => match (opc, f3, rd, rs1, imm) {
                (0b00100, 0b000, _, _, _) => Inst::Addi { rd, rs1, imm },
                (0b00100, 0b010, _, _, _) => Inst::Slti { rd, rs1, imm },
                (0b00100, 0b011, _, _, _) => Inst::Sltiu { rd, rs1, imm },
                (0b00100, 0b100, _, _, _) => Inst::Xori { rd, rs1, imm },
                (0b00100, 0b110, _, _, _) => Inst::Ori { rd, rs1, imm },
                (0b00100, 0b111, _, _, _) => Inst::Andi { rd, rs1, imm },
                (0b00100, 0b001, _, _, imm) if ext!(imm, u8; 11;6) == 0 => {
                    Inst::Slli { rd, rs1, imm }
                }
                (0b00100, 0b101, _, _, imm) if ext!(imm, u8; 11;6) == 0 => {
                    Inst::Srli { rd, rs1, imm }
                }
                (0b00100, 0b101, _, _, imm) if ext!(imm, u8; 11;6) == 0b010000 => {
                    Inst::Srai { rd, rs1, imm }
                }
                (0b00000, 0b000, _, _, _) => Inst::Lb { rd, rs1, imm },
                (0b00000, 0b001, _, _, _) => Inst::Lh { rd, rs1, imm },
                (0b00000, 0b010, _, _, _) => Inst::Lw { rd, rs1, imm },
                (0b00000, 0b100, _, _, _) => Inst::Lbu { rd, rs1, imm },
                (0b00000, 0b101, _, _, _) => Inst::Lhu { rd, rs1, imm },
                (0b11001, 0b000, _, _, _) => Inst::Jalr { rd, rs1, imm },
                (0b00011, 0b000, _, _, _) => Inst::Fence { rd, rs1, imm },
                (0b00011, 0b001, _, _, _) => Inst::FenceI { rd, rs1, imm },
                (0b11100, 0b001, _, _, _) => Inst::Csrrw { rd, rs1, imm },
                (0b11100, 0b010, _, _, _) => Inst::Csrrs { rd, rs1, imm },
                (0b11100, 0b011, _, _, _) => Inst::Csrrc { rd, rs1, imm },
                (0b11100, 0b101, _, _, _) => Inst::Csrrwi { rd, rs1, imm },
                (0b11100, 0b110, _, _, _) => Inst::Csrrsi { rd, rs1, imm },
                (0b11100, 0b111, _, _, _) => Inst::Csrrci { rd, rs1, imm },
                (0b11100, 0b000, _, _, 0b000000000000) => Inst::Ecall { rd, rs1, imm },
                (0b11100, 0b000, _, _, 0b000000000001) => Inst::Ebreak { rd, rs1, imm },
                (0b11100, 0b000, _, _, 0b000000000010) => Inst::Uret { rd, rs1, imm },
                (0b11100, 0b000, _, _, 0b000100000010) => Inst::Sret { rd, rs1, imm },
                (0b11100, 0b000, _, _, 0b001100000010) => Inst::Mret { rd, rs1, imm },
                (0b11100, 0b000, _, _, 0b000100000101) => Inst::Wfi { rd, rs1, imm },
                (0b00110, 0b000, _, _, _) => Inst::Addiw { rd, rs1, imm },
                (0b00110, 0b001, _, _, imm) if ext!(imm, u8; 11;5) == 0 => {
                    Inst::Slliw { rd, rs1, imm }
                }
                (0b00110, 0b101, _, _, imm) if ext!(imm, u8; 11;5) == 0 => {
                    Inst::Srliw { rd, rs1, imm }
                }
                (0b00110, 0b101, _, _, imm) if ext!(imm, u8; 11;5) == 0b0100000 => {
                    Inst::Sraiw { rd, rs1, imm }
                }
                (0b00000, 0b110, _, _, _) => Inst::Lwu { rd, rs1, imm },
                (0b00000, 0b011, _, _, _) => Inst::Ld { rd, rs1, imm },

                #[allow(unreachable_patterns)]
                _ => return None,
            },
            S {
                opc,
                f3,
                rs1,
                rs2,
                imm,
            } => match (opc, f3, rs1, rs2, imm) {
                (0b01000, 0b000, _, _, _) => Inst::Sb { rs1, rs2, imm },
                (0b01000, 0b001, _, _, _) => Inst::Sh { rs1, rs2, imm },
                (0b01000, 0b010, _, _, _) => Inst::Sw { rs1, rs2, imm },
                (0b01000, 0b011, _, _, _) => Inst::Sd { rs1, rs2, imm },

                #[allow(unreachable_patterns)]
                _ => return None,
            },
            B {
                opc,
                f3,
                rs1,
                rs2,
                imm,
            } => match (opc, f3, rs1, rs2, imm) {
                (0b11000, 0b000, _, _, _) => Inst::Beq { rs1, rs2, imm },
                (0b11000, 0b001, _, _, _) => Inst::Bne { rs1, rs2, imm },
                (0b11000, 0b100, _, _, _) => Inst::Blt { rs1, rs2, imm },
                (0b11000, 0b101, _, _, _) => Inst::Bge { rs1, rs2, imm },
                (0b11000, 0b110, _, _, _) => Inst::Bltu { rs1, rs2, imm },
                (0b11000, 0b111, _, _, _) => Inst::Bgeu { rs1, rs2, imm },

                #[allow(unreachable_patterns)]
                _ => return None,
            },
            U { opc, rd, imm } => match (opc, rd, imm) {
                (0b01101, _, _) => Inst::Lui { rd, imm },
                (0b00101, _, _) => Inst::Auipc { rd, imm },

                #[allow(unreachable_patterns)]
                _ => return None,
            },
            J { opc, rd, imm } => match (opc, rd, imm) {
                (0b11011, _, _) => Inst::Jal { rd, imm },

                #[allow(unreachable_patterns)]
                _ => return None,
            },
        })
    }

    pub fn run(self, vm: &mut VM) -> Result<(), VMRunError> {
        match self {
            Inst::Add { rd, rs1, rs2 } => Add::run(DataR { vm, rd, rs1, rs2 }),
            Inst::Sub { rd, rs1, rs2 } => Sub::run(DataR { vm, rd, rs1, rs2 }),
            Inst::Sll { rd, rs1, rs2 } => Sll::run(DataR { vm, rd, rs1, rs2 }),
            Inst::Slt { rd, rs1, rs2 } => Slt::run(DataR { vm, rd, rs1, rs2 }),
            Inst::Sltu { rd, rs1, rs2 } => Sltu::run(DataR { vm, rd, rs1, rs2 }),
            Inst::Xor { rd, rs1, rs2 } => Xor::run(DataR { vm, rd, rs1, rs2 }),
            Inst::Srl { rd, rs1, rs2 } => Srl::run(DataR { vm, rd, rs1, rs2 }),
            Inst::Sra { rd, rs1, rs2 } => Sra::run(DataR { vm, rd, rs1, rs2 }),
            Inst::Or { rd, rs1, rs2 } => Or::run(DataR { vm, rd, rs1, rs2 }),
            Inst::And { rd, rs1, rs2 } => And::run(DataR { vm, rd, rs1, rs2 }),
            Inst::SfenceVma { rd, rs1, rs2 } => SfenceVma::run(DataR { vm, rd, rs1, rs2 }),
            Inst::Addi { rd, rs1, imm } => Addi::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Slti { rd, rs1, imm } => Slti::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Sltiu { rd, rs1, imm } => Sltiu::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Xori { rd, rs1, imm } => Xori::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Ori { rd, rs1, imm } => Ori::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Andi { rd, rs1, imm } => Andi::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Slli { rd, rs1, imm } => Slli::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Srli { rd, rs1, imm } => Srli::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Srai { rd, rs1, imm } => Srai::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Lb { rd, rs1, imm } => Lb::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Lh { rd, rs1, imm } => Lh::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Lw { rd, rs1, imm } => Lw::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Lbu { rd, rs1, imm } => Lbu::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Lhu { rd, rs1, imm } => Lhu::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Jalr { rd, rs1, imm } => Jalr::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Fence { rd, rs1, imm } => Fence::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::FenceI { rd, rs1, imm } => FenceI::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Csrrw { rd, rs1, imm } => Csrrw::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Csrrs { rd, rs1, imm } => Csrrs::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Csrrc { rd, rs1, imm } => Csrrc::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Csrrwi { rd, rs1, imm } => Csrrwi::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Csrrsi { rd, rs1, imm } => Csrrsi::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Csrrci { rd, rs1, imm } => Csrrci::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Ecall { rd, rs1, imm } => Ecall::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Ebreak { rd, rs1, imm } => Ebreak::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Uret { rd, rs1, imm } => Uret::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Sret { rd, rs1, imm } => Sret::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Mret { rd, rs1, imm } => Mret::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Wfi { rd, rs1, imm } => Wfi::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Sb { rs1, rs2, imm } => Sb::run(DataS {
                vm,
                rs1,
                rs2,
                raw_imm: imm,
            }),
            Inst::Sh { rs1, rs2, imm } => Sh::run(DataS {
                vm,
                rs1,
                rs2,
                raw_imm: imm,
            }),
            Inst::Sw { rs1, rs2, imm } => Sw::run(DataS {
                vm,
                rs1,
                rs2,
                raw_imm: imm,
            }),
            Inst::Beq { rs1, rs2, imm } => Beq::run(DataB {
                vm,
                rs1,
                rs2,
                raw_imm: imm,
            }),
            Inst::Bne { rs1, rs2, imm } => Bne::run(DataB {
                vm,
                rs1,
                rs2,
                raw_imm: imm,
            }),
            Inst::Blt { rs1, rs2, imm } => Blt::run(DataB {
                vm,
                rs1,
                rs2,
                raw_imm: imm,
            }),
            Inst::Bge { rs1, rs2, imm } => Bge::run(DataB {
                vm,
                rs1,
                rs2,
                raw_imm: imm,
            }),
            Inst::Bltu { rs1, rs2, imm } => Bltu::run(DataB {
                vm,
                rs1,
                rs2,
                raw_imm: imm,
            }),
            Inst::Bgeu { rs1, rs2, imm } => Bgeu::run(DataB {
                vm,
                rs1,
                rs2,
                raw_imm: imm,
            }),
            Inst::Lui { rd, imm } => Lui::run(DataU {
                vm,
                rd,
                raw_imm: imm,
            }),
            Inst::Auipc { rd, imm } => Auipc::run(DataU {
                vm,
                rd,
                raw_imm: imm,
            }),
            Inst::Jal { rd, imm } => Jal::run(DataJ {
                vm,
                rd,
                raw_imm: imm,
            }),
            Inst::Addw { rd, rs1, rs2 } => Addw::run(DataR { vm, rd, rs1, rs2 }),
            Inst::Subw { rd, rs1, rs2 } => Subw::run(DataR { vm, rd, rs1, rs2 }),
            Inst::Sllw { rd, rs1, rs2 } => Sllw::run(DataR { vm, rd, rs1, rs2 }),
            Inst::Srlw { rd, rs1, rs2 } => Srlw::run(DataR { vm, rd, rs1, rs2 }),
            Inst::Sraw { rd, rs1, rs2 } => Sraw::run(DataR { vm, rd, rs1, rs2 }),
            Inst::Addiw { rd, rs1, imm } => Addiw::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Slliw { rd, rs1, imm } => Slliw::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Srliw { rd, rs1, imm } => Srliw::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Sraiw { rd, rs1, imm } => Sraiw::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Lwu { rd, rs1, imm } => Lwu::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Ld { rd, rs1, imm } => Ld::run(DataI {
                vm,
                rd,
                rs1,
                raw_imm: imm,
            }),
            Inst::Sd { rs1, rs2, imm } => Sd::run(DataS {
                vm,
                rs1,
                rs2,
                raw_imm: imm,
            }),
            Inst::Mul { rd, rs1, rs2 } => Mul::run(DataR { vm, rd, rs1, rs2 }),
            Inst::Mulh { rd, rs1, rs2 } => Mulh::run(DataR { vm, rd, rs1, rs2 }),
            Inst::Mulhsu { rd, rs1, rs2 } => Mulhsu::run(DataR { vm, rd, rs1, rs2 }),
            Inst::Mulhu { rd, rs1, rs2 } => Mulhu::run(DataR { vm, rd, rs1, rs2 }),
            Inst::Div { rd, rs1, rs2 } => Div::run(DataR { vm, rd, rs1, rs2 }),
            Inst::Divu { rd, rs1, rs2 } => Divu::run(DataR { vm, rd, rs1, rs2 }),
            Inst::Rem { rd, rs1, rs2 } => Rem::run(DataR { vm, rd, rs1, rs2 }),
            Inst::Remu { rd, rs1, rs2 } => Remu::run(DataR { vm, rd, rs1, rs2 }),
            Inst::Mulw { rd, rs1, rs2 } => Mulw::run(DataR { vm, rd, rs1, rs2 }),
            Inst::Divw { rd, rs1, rs2 } => Divw::run(DataR { vm, rd, rs1, rs2 }),
            Inst::Divuw { rd, rs1, rs2 } => Divuw::run(DataR { vm, rd, rs1, rs2 }),
            Inst::Remw { rd, rs1, rs2 } => Remw::run(DataR { vm, rd, rs1, rs2 }),
            Inst::Remuw { rd, rs1, rs2 } => Remuw::run(DataR { vm, rd, rs1, rs2 }),

            #[allow(unreachable_patterns)]
            _ => {
                return Err(VMRunError {
                    err_addr: vm.pc,
                    kind: VMRunErrorKind::Other(format!("{:?}", self)),
                    info: "unimplemented inst",
                });
            }
        }
    }

    pub fn name(self) -> &'static str {
        match self {
            Inst::Add { .. } => "add",
            Inst::Sub { .. } => "sub",
            Inst::Sll { .. } => "sll",
            Inst::Slt { .. } => "slt",
            Inst::Sltu { .. } => "sltu",
            Inst::Xor { .. } => "xor",
            Inst::Srl { .. } => "srl",
            Inst::Sra { .. } => "sra",
            Inst::Or { .. } => "or",
            Inst::And { .. } => "and",
            Inst::SfenceVma { .. } => "sfence.vma",
            Inst::Addi { .. } => "addi",
            Inst::Slti { .. } => "slti",
            Inst::Sltiu { .. } => "sltiu",
            Inst::Xori { .. } => "xori",
            Inst::Ori { .. } => "ori",
            Inst::Andi { .. } => "andi",
            Inst::Slli { .. } => "slli",
            Inst::Srli { .. } => "srli",
            Inst::Srai { .. } => "srai",
            Inst::Lb { .. } => "lb",
            Inst::Lh { .. } => "lh",
            Inst::Lw { .. } => "lw",
            Inst::Lbu { .. } => "lbu",
            Inst::Lhu { .. } => "lhu",
            Inst::Jalr { .. } => "jalr",
            Inst::Fence { .. } => "fence",
            Inst::FenceI { .. } => "fence.i",
            Inst::Csrrw { .. } => "csrrw",
            Inst::Csrrs { .. } => "csrrs",
            Inst::Csrrc { .. } => "csrrc",
            Inst::Csrrwi { .. } => "csrrwi",
            Inst::Csrrsi { .. } => "csrrsi",
            Inst::Csrrci { .. } => "csrrci",
            Inst::Ecall { .. } => "ecall",
            Inst::Ebreak { .. } => "ebreak",
            Inst::Uret { .. } => "uret",
            Inst::Sret { .. } => "sret",
            Inst::Mret { .. } => "mret",
            Inst::Wfi { .. } => "wfi",
            Inst::Sb { .. } => "sb",
            Inst::Sh { .. } => "sh",
            Inst::Sw { .. } => "sw",
            Inst::Beq { .. } => "beq",
            Inst::Bne { .. } => "bne",
            Inst::Blt { .. } => "blt",
            Inst::Bge { .. } => "bge",
            Inst::Bltu { .. } => "bltu",
            Inst::Bgeu { .. } => "bgeu",
            Inst::Lui { .. } => "lui",
            Inst::Auipc { .. } => "auipc",
            Inst::Jal { .. } => "jal",
            Inst::Addw { .. } => "addw",
            Inst::Subw { .. } => "subw",
            Inst::Sllw { .. } => "sllw",
            Inst::Srlw { .. } => "srlw",
            Inst::Sraw { .. } => "sraw",
            Inst::Addiw { .. } => "addiw",
            Inst::Slliw { .. } => "slliw",
            Inst::Srliw { .. } => "srliw",
            Inst::Sraiw { .. } => "sraiw",
            Inst::Lwu { .. } => "lwu",
            Inst::Ld { .. } => "ld",
            Inst::Sd { .. } => "sd",
            Inst::Mul { .. } => "mul",
            Inst::Mulh { .. } => "mulh",
            Inst::Mulhsu { .. } => "mulhsu",
            Inst::Mulhu { .. } => "mulhu",
            Inst::Div { .. } => "div",
            Inst::Divu { .. } => "divu",
            Inst::Rem { .. } => "rem",
            Inst::Remu { .. } => "remu",
            Inst::Mulw { .. } => "mulw",
            Inst::Divw { .. } => "divw",
            Inst::Divuw { .. } => "divuw",
            Inst::Remw { .. } => "remw",
            Inst::Remuw { .. } => "remuw",

            #[allow(unreachable_patterns)]
            _ => "unknown",
        }
    }
}
