// $GEN_VERSION 3
// This file is auto-generated.
// Do not edit this file manually, use `gen_inst.py` to regenerate it.
#![allow(
    dead_code,
    unused_variables,
    unused_imports,
    unreachable_code,
    unused_mut
)]
use crate::bits::*;
use crate::format::*;
use crate::{VM, VMRunError, VMRunErrorKind};

mod rv32i_rv64i;
use rv32i_rv64i::*;

mod rv64i;
use rv64i::*;

mod rv32m_rv64m;
use rv32m_rv64m::*;

mod rv64m;
use rv64m::*;

#[derive(Debug, Clone, Copy)]
pub enum Inst {
    // RV32I_RV64I
    Add(RawInst),
    Sub(RawInst),
    Sll(RawInst),
    Slt(RawInst),
    Sltu(RawInst),
    Xor(RawInst),
    Srl(RawInst),
    Sra(RawInst),
    Or(RawInst),
    And(RawInst),
    SfenceVma(RawInst),
    Addi(RawInst),
    Slti(RawInst),
    Sltiu(RawInst),
    Xori(RawInst),
    Ori(RawInst),
    Andi(RawInst),
    Slli(RawInst),
    Srli(RawInst),
    Srai(RawInst),
    Lb(RawInst),
    Lh(RawInst),
    Lw(RawInst),
    Lbu(RawInst),
    Lhu(RawInst),
    Jalr(RawInst),
    Fence(RawInst),
    FenceI(RawInst),
    Csrrw(RawInst),
    Csrrs(RawInst),
    Csrrc(RawInst),
    Csrrwi(RawInst),
    Csrrsi(RawInst),
    Csrrci(RawInst),
    Ecall(RawInst),
    Ebreak(RawInst),
    Uret(RawInst),
    Sret(RawInst),
    Mret(RawInst),
    Wfi(RawInst),
    Sb(RawInst),
    Sh(RawInst),
    Sw(RawInst),
    Beq(RawInst),
    Bne(RawInst),
    Blt(RawInst),
    Bge(RawInst),
    Bltu(RawInst),
    Bgeu(RawInst),
    Lui(RawInst),
    Auipc(RawInst),
    Jal(RawInst),

    // RV64I
    Addw(RawInst),
    Subw(RawInst),
    Sllw(RawInst),
    Srlw(RawInst),
    Sraw(RawInst),
    Addiw(RawInst),
    Slliw(RawInst),
    Srliw(RawInst),
    Sraiw(RawInst),
    Lwu(RawInst),
    Ld(RawInst),
    Sd(RawInst),

    // RV32M_RV64M
    Mul(RawInst),
    Mulh(RawInst),
    Mulhsu(RawInst),
    Mulhu(RawInst),
    Div(RawInst),
    Divu(RawInst),
    Rem(RawInst),
    Remu(RawInst),

    // RV64M
    Mulw(RawInst),
    Divw(RawInst),
    Divuw(RawInst),
    Remw(RawInst),
    Remuw(RawInst),
}

impl Inst {
    pub fn decode(inst: u32) -> Option<Self> {
        Some(match inst {
            v if ext!(v, u32; 6;0) == 0b0110011
                && ext!(v, u32; 14;12) == 0b000
                && ext!(v, u32; 31;25) == 0b0000000 =>
            {
                Inst::Add(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0110011
                && ext!(v, u32; 14;12) == 0b000
                && ext!(v, u32; 31;25) == 0b0100000 =>
            {
                Inst::Sub(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0110011
                && ext!(v, u32; 14;12) == 0b001
                && ext!(v, u32; 31;25) == 0b0000000 =>
            {
                Inst::Sll(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0110011
                && ext!(v, u32; 14;12) == 0b010
                && ext!(v, u32; 31;25) == 0b0000000 =>
            {
                Inst::Slt(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0110011
                && ext!(v, u32; 14;12) == 0b011
                && ext!(v, u32; 31;25) == 0b0000000 =>
            {
                Inst::Sltu(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0110011
                && ext!(v, u32; 14;12) == 0b100
                && ext!(v, u32; 31;25) == 0b0000000 =>
            {
                Inst::Xor(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0110011
                && ext!(v, u32; 14;12) == 0b101
                && ext!(v, u32; 31;25) == 0b0000000 =>
            {
                Inst::Srl(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0110011
                && ext!(v, u32; 14;12) == 0b101
                && ext!(v, u32; 31;25) == 0b0100000 =>
            {
                Inst::Sra(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0110011
                && ext!(v, u32; 14;12) == 0b110
                && ext!(v, u32; 31;25) == 0b0000000 =>
            {
                Inst::Or(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0110011
                && ext!(v, u32; 14;12) == 0b111
                && ext!(v, u32; 31;25) == 0b0000000 =>
            {
                Inst::And(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b1110011
                && ext!(v, u32; 14;12) == 0b000
                && ext!(v, u32; 31;25) == 0b0001001 =>
            {
                Inst::SfenceVma(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0010011 && ext!(v, u32; 14;12) == 0b000 => {
                Inst::Addi(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0010011 && ext!(v, u32; 14;12) == 0b010 => {
                Inst::Slti(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0010011 && ext!(v, u32; 14;12) == 0b011 => {
                Inst::Sltiu(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0010011 && ext!(v, u32; 14;12) == 0b100 => {
                Inst::Xori(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0010011 && ext!(v, u32; 14;12) == 0b110 => {
                Inst::Ori(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0010011 && ext!(v, u32; 14;12) == 0b111 => {
                Inst::Andi(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0010011
                && ext!(v, u32; 14;12) == 0b001
                && ext!(v, u32; 31;26) == 0b000000 =>
            {
                Inst::Slli(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0010011
                && ext!(v, u32; 14;12) == 0b101
                && ext!(v, u32; 31;26) == 0b000000 =>
            {
                Inst::Srli(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0010011
                && ext!(v, u32; 14;12) == 0b101
                && ext!(v, u32; 31;26) == 0b010000 =>
            {
                Inst::Srai(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0000011 && ext!(v, u32; 14;12) == 0b000 => {
                Inst::Lb(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0000011 && ext!(v, u32; 14;12) == 0b001 => {
                Inst::Lh(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0000011 && ext!(v, u32; 14;12) == 0b010 => {
                Inst::Lw(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0000011 && ext!(v, u32; 14;12) == 0b100 => {
                Inst::Lbu(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0000011 && ext!(v, u32; 14;12) == 0b101 => {
                Inst::Lhu(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b1100111 && ext!(v, u32; 14;12) == 0b000 => {
                Inst::Jalr(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0001111 && ext!(v, u32; 14;12) == 0b000 => {
                Inst::Fence(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0001111 && ext!(v, u32; 14;12) == 0b001 => {
                Inst::FenceI(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b1110011 && ext!(v, u32; 14;12) == 0b001 => {
                Inst::Csrrw(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b1110011 && ext!(v, u32; 14;12) == 0b010 => {
                Inst::Csrrs(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b1110011 && ext!(v, u32; 14;12) == 0b011 => {
                Inst::Csrrc(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b1110011 && ext!(v, u32; 14;12) == 0b101 => {
                Inst::Csrrwi(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b1110011 && ext!(v, u32; 14;12) == 0b110 => {
                Inst::Csrrsi(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b1110011 && ext!(v, u32; 14;12) == 0b111 => {
                Inst::Csrrci(inst.into())
            }
            v if ext!(v, u32; 31;0) == 0b00000000000000000000000001110011 => {
                Inst::Ecall(inst.into())
            }
            v if ext!(v, u32; 31;0) == 0b00000000000100000000000001110011 => {
                Inst::Ebreak(inst.into())
            }
            v if ext!(v, u32; 31;0) == 0b00000000001000000000000001110011 => {
                Inst::Uret(inst.into())
            }
            v if ext!(v, u32; 31;0) == 0b00010000001000000000000001110011 => {
                Inst::Sret(inst.into())
            }
            v if ext!(v, u32; 31;0) == 0b00110000001000000000000001110011 => {
                Inst::Mret(inst.into())
            }
            v if ext!(v, u32; 31;0) == 0b00010000010100000000000001110011 => Inst::Wfi(inst.into()),
            v if ext!(v, u32; 6;0) == 0b0100011 && ext!(v, u32; 14;12) == 0b000 => {
                Inst::Sb(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0100011 && ext!(v, u32; 14;12) == 0b001 => {
                Inst::Sh(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0100011 && ext!(v, u32; 14;12) == 0b010 => {
                Inst::Sw(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b1100011 && ext!(v, u32; 14;12) == 0b000 => {
                Inst::Beq(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b1100011 && ext!(v, u32; 14;12) == 0b001 => {
                Inst::Bne(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b1100011 && ext!(v, u32; 14;12) == 0b100 => {
                Inst::Blt(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b1100011 && ext!(v, u32; 14;12) == 0b101 => {
                Inst::Bge(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b1100011 && ext!(v, u32; 14;12) == 0b110 => {
                Inst::Bltu(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b1100011 && ext!(v, u32; 14;12) == 0b111 => {
                Inst::Bgeu(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0110111 => Inst::Lui(inst.into()),
            v if ext!(v, u32; 6;0) == 0b0010111 => Inst::Auipc(inst.into()),
            v if ext!(v, u32; 6;0) == 0b1101111 => Inst::Jal(inst.into()),
            v if ext!(v, u32; 6;0) == 0b0111011
                && ext!(v, u32; 14;12) == 0b000
                && ext!(v, u32; 31;25) == 0b0000000 =>
            {
                Inst::Addw(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0111011
                && ext!(v, u32; 14;12) == 0b000
                && ext!(v, u32; 31;25) == 0b0100000 =>
            {
                Inst::Subw(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0111011
                && ext!(v, u32; 14;12) == 0b001
                && ext!(v, u32; 31;25) == 0b0000000 =>
            {
                Inst::Sllw(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0111011
                && ext!(v, u32; 14;12) == 0b101
                && ext!(v, u32; 31;25) == 0b0000000 =>
            {
                Inst::Srlw(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0111011
                && ext!(v, u32; 14;12) == 0b101
                && ext!(v, u32; 31;25) == 0b0100000 =>
            {
                Inst::Sraw(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0011011 && ext!(v, u32; 14;12) == 0b000 => {
                Inst::Addiw(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0011011
                && ext!(v, u32; 14;12) == 0b001
                && ext!(v, u32; 31;25) == 0b0000000 =>
            {
                Inst::Slliw(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0011011
                && ext!(v, u32; 14;12) == 0b101
                && ext!(v, u32; 31;25) == 0b0000000 =>
            {
                Inst::Srliw(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0011011
                && ext!(v, u32; 14;12) == 0b101
                && ext!(v, u32; 31;25) == 0b0100000 =>
            {
                Inst::Sraiw(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0000011 && ext!(v, u32; 14;12) == 0b110 => {
                Inst::Lwu(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0000011 && ext!(v, u32; 14;12) == 0b011 => {
                Inst::Ld(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0100011 && ext!(v, u32; 14;12) == 0b011 => {
                Inst::Sd(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0110011
                && ext!(v, u32; 14;12) == 0b000
                && ext!(v, u32; 31;25) == 0b0000001 =>
            {
                Inst::Mul(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0110011
                && ext!(v, u32; 14;12) == 0b001
                && ext!(v, u32; 31;25) == 0b0000001 =>
            {
                Inst::Mulh(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0110011
                && ext!(v, u32; 14;12) == 0b010
                && ext!(v, u32; 31;25) == 0b0000001 =>
            {
                Inst::Mulhsu(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0110011
                && ext!(v, u32; 14;12) == 0b011
                && ext!(v, u32; 31;25) == 0b0000001 =>
            {
                Inst::Mulhu(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0110011
                && ext!(v, u32; 14;12) == 0b100
                && ext!(v, u32; 31;25) == 0b0000001 =>
            {
                Inst::Div(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0110011
                && ext!(v, u32; 14;12) == 0b101
                && ext!(v, u32; 31;25) == 0b0000001 =>
            {
                Inst::Divu(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0110011
                && ext!(v, u32; 14;12) == 0b110
                && ext!(v, u32; 31;25) == 0b0000001 =>
            {
                Inst::Rem(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0110011
                && ext!(v, u32; 14;12) == 0b111
                && ext!(v, u32; 31;25) == 0b0000001 =>
            {
                Inst::Remu(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0111011
                && ext!(v, u32; 14;12) == 0b000
                && ext!(v, u32; 31;25) == 0b0000001 =>
            {
                Inst::Mulw(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0111011
                && ext!(v, u32; 14;12) == 0b100
                && ext!(v, u32; 31;25) == 0b0000001 =>
            {
                Inst::Divw(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0111011
                && ext!(v, u32; 14;12) == 0b101
                && ext!(v, u32; 31;25) == 0b0000001 =>
            {
                Inst::Divuw(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0111011
                && ext!(v, u32; 14;12) == 0b110
                && ext!(v, u32; 31;25) == 0b0000001 =>
            {
                Inst::Remw(inst.into())
            }
            v if ext!(v, u32; 6;0) == 0b0111011
                && ext!(v, u32; 14;12) == 0b111
                && ext!(v, u32; 31;25) == 0b0000001 =>
            {
                Inst::Remuw(inst.into())
            }
            #[allow(unreachable_patterns)]
            _ => return None,
        })
    }

    pub fn run(self, vm: &mut VM) -> Result<(), VMRunError> {
        match self {
            Inst::Add(inst) => Add::run(RunData::new(inst, vm)),
            Inst::Sub(inst) => Sub::run(RunData::new(inst, vm)),
            Inst::Sll(inst) => Sll::run(RunData::new(inst, vm)),
            Inst::Slt(inst) => Slt::run(RunData::new(inst, vm)),
            Inst::Sltu(inst) => Sltu::run(RunData::new(inst, vm)),
            Inst::Xor(inst) => Xor::run(RunData::new(inst, vm)),
            Inst::Srl(inst) => Srl::run(RunData::new(inst, vm)),
            Inst::Sra(inst) => Sra::run(RunData::new(inst, vm)),
            Inst::Or(inst) => Or::run(RunData::new(inst, vm)),
            Inst::And(inst) => And::run(RunData::new(inst, vm)),
            Inst::SfenceVma(inst) => SfenceVma::run(RunData::new(inst, vm)),
            Inst::Addi(inst) => Addi::run(RunData::new(inst, vm)),
            Inst::Slti(inst) => Slti::run(RunData::new(inst, vm)),
            Inst::Sltiu(inst) => Sltiu::run(RunData::new(inst, vm)),
            Inst::Xori(inst) => Xori::run(RunData::new(inst, vm)),
            Inst::Ori(inst) => Ori::run(RunData::new(inst, vm)),
            Inst::Andi(inst) => Andi::run(RunData::new(inst, vm)),
            Inst::Slli(inst) => Slli::run(RunData::new(inst, vm)),
            Inst::Srli(inst) => Srli::run(RunData::new(inst, vm)),
            Inst::Srai(inst) => Srai::run(RunData::new(inst, vm)),
            Inst::Lb(inst) => Lb::run(RunData::new(inst, vm)),
            Inst::Lh(inst) => Lh::run(RunData::new(inst, vm)),
            Inst::Lw(inst) => Lw::run(RunData::new(inst, vm)),
            Inst::Lbu(inst) => Lbu::run(RunData::new(inst, vm)),
            Inst::Lhu(inst) => Lhu::run(RunData::new(inst, vm)),
            Inst::Jalr(inst) => Jalr::run(RunData::new(inst, vm)),
            Inst::Fence(inst) => Fence::run(RunData::new(inst, vm)),
            Inst::FenceI(inst) => FenceI::run(RunData::new(inst, vm)),
            Inst::Csrrw(inst) => Csrrw::run(RunData::new(inst, vm)),
            Inst::Csrrs(inst) => Csrrs::run(RunData::new(inst, vm)),
            Inst::Csrrc(inst) => Csrrc::run(RunData::new(inst, vm)),
            Inst::Csrrwi(inst) => Csrrwi::run(RunData::new(inst, vm)),
            Inst::Csrrsi(inst) => Csrrsi::run(RunData::new(inst, vm)),
            Inst::Csrrci(inst) => Csrrci::run(RunData::new(inst, vm)),
            Inst::Ecall(inst) => Ecall::run(RunData::new(inst, vm)),
            Inst::Ebreak(inst) => Ebreak::run(RunData::new(inst, vm)),
            Inst::Uret(inst) => Uret::run(RunData::new(inst, vm)),
            Inst::Sret(inst) => Sret::run(RunData::new(inst, vm)),
            Inst::Mret(inst) => Mret::run(RunData::new(inst, vm)),
            Inst::Wfi(inst) => Wfi::run(RunData::new(inst, vm)),
            Inst::Sb(inst) => Sb::run(RunData::new(inst, vm)),
            Inst::Sh(inst) => Sh::run(RunData::new(inst, vm)),
            Inst::Sw(inst) => Sw::run(RunData::new(inst, vm)),
            Inst::Beq(inst) => Beq::run(RunData::new(inst, vm)),
            Inst::Bne(inst) => Bne::run(RunData::new(inst, vm)),
            Inst::Blt(inst) => Blt::run(RunData::new(inst, vm)),
            Inst::Bge(inst) => Bge::run(RunData::new(inst, vm)),
            Inst::Bltu(inst) => Bltu::run(RunData::new(inst, vm)),
            Inst::Bgeu(inst) => Bgeu::run(RunData::new(inst, vm)),
            Inst::Lui(inst) => Lui::run(RunData::new(inst, vm)),
            Inst::Auipc(inst) => Auipc::run(RunData::new(inst, vm)),
            Inst::Jal(inst) => Jal::run(RunData::new(inst, vm)),
            Inst::Addw(inst) => Addw::run(RunData::new(inst, vm)),
            Inst::Subw(inst) => Subw::run(RunData::new(inst, vm)),
            Inst::Sllw(inst) => Sllw::run(RunData::new(inst, vm)),
            Inst::Srlw(inst) => Srlw::run(RunData::new(inst, vm)),
            Inst::Sraw(inst) => Sraw::run(RunData::new(inst, vm)),
            Inst::Addiw(inst) => Addiw::run(RunData::new(inst, vm)),
            Inst::Slliw(inst) => Slliw::run(RunData::new(inst, vm)),
            Inst::Srliw(inst) => Srliw::run(RunData::new(inst, vm)),
            Inst::Sraiw(inst) => Sraiw::run(RunData::new(inst, vm)),
            Inst::Lwu(inst) => Lwu::run(RunData::new(inst, vm)),
            Inst::Ld(inst) => Ld::run(RunData::new(inst, vm)),
            Inst::Sd(inst) => Sd::run(RunData::new(inst, vm)),
            Inst::Mul(inst) => Mul::run(RunData::new(inst, vm)),
            Inst::Mulh(inst) => Mulh::run(RunData::new(inst, vm)),
            Inst::Mulhsu(inst) => Mulhsu::run(RunData::new(inst, vm)),
            Inst::Mulhu(inst) => Mulhu::run(RunData::new(inst, vm)),
            Inst::Div(inst) => Div::run(RunData::new(inst, vm)),
            Inst::Divu(inst) => Divu::run(RunData::new(inst, vm)),
            Inst::Rem(inst) => Rem::run(RunData::new(inst, vm)),
            Inst::Remu(inst) => Remu::run(RunData::new(inst, vm)),
            Inst::Mulw(inst) => Mulw::run(RunData::new(inst, vm)),
            Inst::Divw(inst) => Divw::run(RunData::new(inst, vm)),
            Inst::Divuw(inst) => Divuw::run(RunData::new(inst, vm)),
            Inst::Remw(inst) => Remw::run(RunData::new(inst, vm)),
            Inst::Remuw(inst) => Remuw::run(RunData::new(inst, vm)),
        }
    }

    pub fn name(self) -> &'static str {
        match self {
            Inst::Add(_) => "add",
            Inst::Sub(_) => "sub",
            Inst::Sll(_) => "sll",
            Inst::Slt(_) => "slt",
            Inst::Sltu(_) => "sltu",
            Inst::Xor(_) => "xor",
            Inst::Srl(_) => "srl",
            Inst::Sra(_) => "sra",
            Inst::Or(_) => "or",
            Inst::And(_) => "and",
            Inst::SfenceVma(_) => "sfence.vma",
            Inst::Addi(_) => "addi",
            Inst::Slti(_) => "slti",
            Inst::Sltiu(_) => "sltiu",
            Inst::Xori(_) => "xori",
            Inst::Ori(_) => "ori",
            Inst::Andi(_) => "andi",
            Inst::Slli(_) => "slli",
            Inst::Srli(_) => "srli",
            Inst::Srai(_) => "srai",
            Inst::Lb(_) => "lb",
            Inst::Lh(_) => "lh",
            Inst::Lw(_) => "lw",
            Inst::Lbu(_) => "lbu",
            Inst::Lhu(_) => "lhu",
            Inst::Jalr(_) => "jalr",
            Inst::Fence(_) => "fence",
            Inst::FenceI(_) => "fence.i",
            Inst::Csrrw(_) => "csrrw",
            Inst::Csrrs(_) => "csrrs",
            Inst::Csrrc(_) => "csrrc",
            Inst::Csrrwi(_) => "csrrwi",
            Inst::Csrrsi(_) => "csrrsi",
            Inst::Csrrci(_) => "csrrci",
            Inst::Ecall(_) => "ecall",
            Inst::Ebreak(_) => "ebreak",
            Inst::Uret(_) => "uret",
            Inst::Sret(_) => "sret",
            Inst::Mret(_) => "mret",
            Inst::Wfi(_) => "wfi",
            Inst::Sb(_) => "sb",
            Inst::Sh(_) => "sh",
            Inst::Sw(_) => "sw",
            Inst::Beq(_) => "beq",
            Inst::Bne(_) => "bne",
            Inst::Blt(_) => "blt",
            Inst::Bge(_) => "bge",
            Inst::Bltu(_) => "bltu",
            Inst::Bgeu(_) => "bgeu",
            Inst::Lui(_) => "lui",
            Inst::Auipc(_) => "auipc",
            Inst::Jal(_) => "jal",
            Inst::Addw(_) => "addw",
            Inst::Subw(_) => "subw",
            Inst::Sllw(_) => "sllw",
            Inst::Srlw(_) => "srlw",
            Inst::Sraw(_) => "sraw",
            Inst::Addiw(_) => "addiw",
            Inst::Slliw(_) => "slliw",
            Inst::Srliw(_) => "srliw",
            Inst::Sraiw(_) => "sraiw",
            Inst::Lwu(_) => "lwu",
            Inst::Ld(_) => "ld",
            Inst::Sd(_) => "sd",
            Inst::Mul(_) => "mul",
            Inst::Mulh(_) => "mulh",
            Inst::Mulhsu(_) => "mulhsu",
            Inst::Mulhu(_) => "mulhu",
            Inst::Div(_) => "div",
            Inst::Divu(_) => "divu",
            Inst::Rem(_) => "rem",
            Inst::Remu(_) => "remu",
            Inst::Mulw(_) => "mulw",
            Inst::Divw(_) => "divw",
            Inst::Divuw(_) => "divuw",
            Inst::Remw(_) => "remw",
            Inst::Remuw(_) => "remuw",
        }
    }

    pub fn format(self) -> Format {
        match self {
            Inst::Add(_) => Format::R,
            Inst::Sub(_) => Format::R,
            Inst::Sll(_) => Format::R,
            Inst::Slt(_) => Format::R,
            Inst::Sltu(_) => Format::R,
            Inst::Xor(_) => Format::R,
            Inst::Srl(_) => Format::R,
            Inst::Sra(_) => Format::R,
            Inst::Or(_) => Format::R,
            Inst::And(_) => Format::R,
            Inst::SfenceVma(_) => Format::R,
            Inst::Addi(_) => Format::I,
            Inst::Slti(_) => Format::I,
            Inst::Sltiu(_) => Format::I,
            Inst::Xori(_) => Format::I,
            Inst::Ori(_) => Format::I,
            Inst::Andi(_) => Format::I,
            Inst::Slli(_) => Format::I,
            Inst::Srli(_) => Format::I,
            Inst::Srai(_) => Format::I,
            Inst::Lb(_) => Format::I,
            Inst::Lh(_) => Format::I,
            Inst::Lw(_) => Format::I,
            Inst::Lbu(_) => Format::I,
            Inst::Lhu(_) => Format::I,
            Inst::Jalr(_) => Format::I,
            Inst::Fence(_) => Format::I,
            Inst::FenceI(_) => Format::I,
            Inst::Csrrw(_) => Format::I,
            Inst::Csrrs(_) => Format::I,
            Inst::Csrrc(_) => Format::I,
            Inst::Csrrwi(_) => Format::I,
            Inst::Csrrsi(_) => Format::I,
            Inst::Csrrci(_) => Format::I,
            Inst::Ecall(_) => Format::I,
            Inst::Ebreak(_) => Format::I,
            Inst::Uret(_) => Format::I,
            Inst::Sret(_) => Format::I,
            Inst::Mret(_) => Format::I,
            Inst::Wfi(_) => Format::I,
            Inst::Sb(_) => Format::S,
            Inst::Sh(_) => Format::S,
            Inst::Sw(_) => Format::S,
            Inst::Beq(_) => Format::B,
            Inst::Bne(_) => Format::B,
            Inst::Blt(_) => Format::B,
            Inst::Bge(_) => Format::B,
            Inst::Bltu(_) => Format::B,
            Inst::Bgeu(_) => Format::B,
            Inst::Lui(_) => Format::U,
            Inst::Auipc(_) => Format::U,
            Inst::Jal(_) => Format::J,
            Inst::Addw(_) => Format::R,
            Inst::Subw(_) => Format::R,
            Inst::Sllw(_) => Format::R,
            Inst::Srlw(_) => Format::R,
            Inst::Sraw(_) => Format::R,
            Inst::Addiw(_) => Format::I,
            Inst::Slliw(_) => Format::I,
            Inst::Srliw(_) => Format::I,
            Inst::Sraiw(_) => Format::I,
            Inst::Lwu(_) => Format::I,
            Inst::Ld(_) => Format::I,
            Inst::Sd(_) => Format::S,
            Inst::Mul(_) => Format::R,
            Inst::Mulh(_) => Format::R,
            Inst::Mulhsu(_) => Format::R,
            Inst::Mulhu(_) => Format::R,
            Inst::Div(_) => Format::R,
            Inst::Divu(_) => Format::R,
            Inst::Rem(_) => Format::R,
            Inst::Remu(_) => Format::R,
            Inst::Mulw(_) => Format::R,
            Inst::Divw(_) => Format::R,
            Inst::Divuw(_) => Format::R,
            Inst::Remw(_) => Format::R,
            Inst::Remuw(_) => Format::R,
        }
    }

    pub fn inner(self) -> RawInst {
        match self {
            Inst::Add(v) => v,
            Inst::Sub(v) => v,
            Inst::Sll(v) => v,
            Inst::Slt(v) => v,
            Inst::Sltu(v) => v,
            Inst::Xor(v) => v,
            Inst::Srl(v) => v,
            Inst::Sra(v) => v,
            Inst::Or(v) => v,
            Inst::And(v) => v,
            Inst::SfenceVma(v) => v,
            Inst::Addi(v) => v,
            Inst::Slti(v) => v,
            Inst::Sltiu(v) => v,
            Inst::Xori(v) => v,
            Inst::Ori(v) => v,
            Inst::Andi(v) => v,
            Inst::Slli(v) => v,
            Inst::Srli(v) => v,
            Inst::Srai(v) => v,
            Inst::Lb(v) => v,
            Inst::Lh(v) => v,
            Inst::Lw(v) => v,
            Inst::Lbu(v) => v,
            Inst::Lhu(v) => v,
            Inst::Jalr(v) => v,
            Inst::Fence(v) => v,
            Inst::FenceI(v) => v,
            Inst::Csrrw(v) => v,
            Inst::Csrrs(v) => v,
            Inst::Csrrc(v) => v,
            Inst::Csrrwi(v) => v,
            Inst::Csrrsi(v) => v,
            Inst::Csrrci(v) => v,
            Inst::Ecall(v) => v,
            Inst::Ebreak(v) => v,
            Inst::Uret(v) => v,
            Inst::Sret(v) => v,
            Inst::Mret(v) => v,
            Inst::Wfi(v) => v,
            Inst::Sb(v) => v,
            Inst::Sh(v) => v,
            Inst::Sw(v) => v,
            Inst::Beq(v) => v,
            Inst::Bne(v) => v,
            Inst::Blt(v) => v,
            Inst::Bge(v) => v,
            Inst::Bltu(v) => v,
            Inst::Bgeu(v) => v,
            Inst::Lui(v) => v,
            Inst::Auipc(v) => v,
            Inst::Jal(v) => v,
            Inst::Addw(v) => v,
            Inst::Subw(v) => v,
            Inst::Sllw(v) => v,
            Inst::Srlw(v) => v,
            Inst::Sraw(v) => v,
            Inst::Addiw(v) => v,
            Inst::Slliw(v) => v,
            Inst::Srliw(v) => v,
            Inst::Sraiw(v) => v,
            Inst::Lwu(v) => v,
            Inst::Ld(v) => v,
            Inst::Sd(v) => v,
            Inst::Mul(v) => v,
            Inst::Mulh(v) => v,
            Inst::Mulhsu(v) => v,
            Inst::Mulhu(v) => v,
            Inst::Div(v) => v,
            Inst::Divu(v) => v,
            Inst::Rem(v) => v,
            Inst::Remu(v) => v,
            Inst::Mulw(v) => v,
            Inst::Divw(v) => v,
            Inst::Divuw(v) => v,
            Inst::Remw(v) => v,
            Inst::Remuw(v) => v,
        }
    }
}
